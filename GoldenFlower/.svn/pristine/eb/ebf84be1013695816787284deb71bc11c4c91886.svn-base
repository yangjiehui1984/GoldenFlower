require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"ButtonScale":[function(require,module,exports){
"use strict";
cc._RFpush(module, '5a421EEBHBHVa9GjAAkNYhq', 'ButtonScale');
// Script/Tools/ButtonScale.js

'use strict';

//按钮标识
var EbuttonTag = cc.Enum({

    eChip20: 0,
    eChip50: 1,
    eChip100: 2,
    eChip500: 3,
    eChip1000: 4,
    eClear: 5,
    eHistoryList: 6

});

cc.Class({
    extends: cc.Component,

    properties: {
        scaleFlag: true,
        buttonTag: 0,
        parentNode: cc.Node },

    // use this for initialization
    onLoad: function onLoad() {

        // var timeCallback = function (dt)
        {
            if (this.parentNode) {
                this.parentNode.on(cc.Node.EventType.TOUCH_START, function (event) {
                    if (this.scaleFlag) {
                        this.node.scale = 0.8;
                    }
                }, this);
            }

            if (this.parentNode) {
                this.parentNode.on(cc.Node.EventType.TOUCH_END, function (event) {
                    if (this.scaleFlag) {
                        this.node.scale = 1;
                    }
                    var onFunction = cc.find('Canvas').getComponent('game');
                    onFunction.btnActionCallBack(this.buttonTag);
                }, this);
            }

            if (this.parentNode) {
                this.parentNode.on(cc.Node.EventType.TOUCH_CANCEL, function (event) {
                    if (this.scaleFlag) {
                        this.node.scale = 1;
                    }
                }, this);
            }
        }
    }

});

module.exports = {
    EbuttonTag: EbuttonTag
};

cc._RFpop();
},{}],"DataOper":[function(require,module,exports){
"use strict";
cc._RFpush(module, '370d7GWnVZOL5PlfbPKEsjx', 'DataOper');
// Script/network/DataOper.js

"use strict";

var CryptoJS = require("core");
require("aes");
var NetData = require("NetData");

var KeyValue = cc.Class({
    properties: {
        key: "",
        value: ""
    }
});

var CusMap = cc.Class({
    properties: {
        maps: {
            default: [],
            type: [KeyValue],
            serializable: false
        }
    },

    set: function set(key, value) {
        var s_key = key.toString();
        var flag = false;

        for (var i = 0; i < this.maps.length; ++i) {
            if (this.maps[i].key === s_key) {
                flag = true;
                this.maps[i].value = value;
                break;
            }
        }

        if (flag === false) {
            var keyValue = new KeyValue();
            keyValue.key = s_key;
            keyValue.value = value;
            this.maps.push(keyValue);
        }
    },

    get: function get(key) {
        var s_key = key.toString();

        for (var i = 0; i < this.maps.length; ++i) {
            if (this.maps[i].key === s_key) {
                return this.maps[i].value;
            }
        }

        return null;
    },

    clear: function clear(key) {
        for (var i = 0; i < this.maps.length; ++i) {
            if (this.maps[i].key == key) {
                this.maps.splice(i, 1);
                break;
            }
        }
    }
});

var NetWork = cc.Class({
    send: function send(requestId, requestHeaders, requestData, callfunc) {
        var xhr = cc.loader.getXMLHttpRequest();

        if (!CC_JSB) {
            if (window.aliLotteryCasinoSDK) {
                xhr = window.aliLotteryCasinoSDK.getHttpRequestObject();
            }
        }

        xhr.open("POST", "http://10.0.20.172:8080/gateway/process");
        //xhr.open("POST", "http://172.16.20.161:7080/gateway/process");//"http://172.16.20.175:8080/gateway/process"); //"http://10.0.1.232:7080/new_gateway/process"); 
        xhr.timeout = 15000; //15s超时

        //设置请求头
        for (var i = 0; i < requestHeaders.length; ++i) {
            xhr.setRequestHeader(requestHeaders[i].key, requestHeaders[i].value);
        }

        xhr.send(requestData);

        xhr.onload = function () {
            callfunc(requestId, xhr);
        };

        xhr.onerror = function () {
            callfunc(requestId, xhr);
        };

        xhr.ontimeout = function () {
            callfunc(requestId, xhr);
        };
    }
});

var DataOper = cc.Class({

    statics: {
        g_DataOperInst: null,
        s_index: 0,

        getInst: function getInst() {

            if (DataOper.g_DataOperInst === null) {
                DataOper.g_DataOperInst = new DataOper();
                DataOper.g_DataOperInst.init();
            }
            return DataOper.g_DataOperInst;
        },

        destoryInst: function destoryInst() {

            if (DataOper.g_DataOperInst !== null) {
                DataOper.g_DataOperInst = null;
            }
        }
    },

    properties: {
        //请求data
        requestData: "",
        //请求id
        requestId: 0,
        //aes Key
        aesKey: "817fed95f9e16bed", //秘钥，写死

        //****************请求头信息**********
        //请求头数组
        requestHeaders: {
            default: [],
            type: [KeyValue],
            serializable: false
        },
        //命令号
        headerCmd: 0, //初始化-100  投注-101  结算-103
        //sig
        headerSig: "",
        //版本号
        headerVer: "1.0",
        //会话标识
        headerToken: "3709187189", //"3706201779",
        //游戏渠道实例标识
        gameToken: "ad80db994dabb90b42db00214b8d301d-9-901-1202" },

    init: function init() {
        this.callfuncs = new CusMap();
        this.callnode = new CusMap();
        this.callcmd = new CusMap();
        cc.log("jb=" + CC_JSB);

        if (!CC_JSB) {
            this.gameToken = this.GetQueryString("accessToken");

            if (this.gameToken == null) {
                this.gameToken = "ad80db994dabb90b42db00214b8d301d-9-901-1202"; //"ddd76cd6e9b62dc2259aa772a4501b22-9-951-926";
                var tok = this.GetQueryString("tok");

                if (tok) {
                    this.headerToken = tok;
                    console.log("tok=" + this.headerToken);
                } else {
                    this.headerToken = "";
                }
                //test
                /*var myDate = new Date();
                this.headerToken = myDate.getTime();*/
            }
        } else {}

        console.log("this.gameToken = " + this.gameToken);
    },

    GetQueryString: function GetQueryString(name) {
        var reg = new RegExp("(^|&)" + name + "=([^&]*)(&|$)");
        var r = window.location.search.substr(1).match(reg);
        if (r !== null) return unescape(r[2]);return null;
    },

    setRequestHeader: function setRequestHeader() {
        this.requestHeaders = [];

        var keyValue = new KeyValue();
        keyValue.key = "cmd";
        keyValue.value = this.headerCmd.toString();
        this.requestHeaders.push(keyValue);

        keyValue = new KeyValue();
        keyValue.key = "Content-Type";
        keyValue.value = "text/plain";
        this.requestHeaders.push(keyValue);

        /*keyValue = new KeyValue();
        keyValue.key = "cid";
        keyValue.value = this.headerCid.toString();
        this.requestHeaders.push(keyValue);*/

        keyValue = new KeyValue();
        keyValue.key = "sig";
        keyValue.value = this.headerSig.toString();
        this.requestHeaders.push(keyValue);

        keyValue = new KeyValue();
        keyValue.key = "ver";
        keyValue.value = this.headerVer.toString();
        this.requestHeaders.push(keyValue);

        keyValue = new KeyValue();
        keyValue.key = "tok";
        keyValue.value = this.headerToken.toString();
        this.requestHeaders.push(keyValue);

        keyValue = new KeyValue();
        keyValue.key = "gameToken";
        keyValue.value = this.gameToken.toString();
        this.requestHeaders.push(keyValue);

        /*keyValue = new KeyValue();
        keyValue.key = "gid";
        keyValue.value = this.headerGid.toString();
        this.requestHeaders.push(keyValue);*/
    },

    request: function request(callFunc, self) {
        //if(this.headerCmd != 105){
        console.log("request-----------data = " + this.requestData + ";cmd:" + this.headerCmd);
        //}

        this.callfuncs.set(DataOper.s_index, callFunc);
        this.callnode.set(DataOper.s_index, self);
        this.callcmd.set(DataOper.s_index, this.headerCmd);
        //aes加密
        this.requestData = this.AESEncryption(this.requestData, this.aesKey);
        //Base64
        //this.requestData = Base64.encode(this.requestData);
        //gzip
        //this.requestData = this.requestData;
        //md5
        this.headerSig = CryptoJS.MD5(this.requestData);
        //请求头
        this.setRequestHeader();
        //send
        var netWork = new NetWork();
        netWork.send(DataOper.s_index, this.requestHeaders, this.requestData, this.onHttpRequestCompleted);
        DataOper.s_index++;
    },

    /**
     * 联网回调
     * @Param requestId 请求id
     * @param status   联网状态
     * @param responeData 响应data
     */
    onHttpRequestCompleted: function onHttpRequestCompleted(requestId, xhr) {
        console.log("onHttpRequestCompleted.xhr.status=" + xhr.status);
        var callFunc = DataOper.getInst().callfuncs.get(requestId);
        var callNode = DataOper.getInst().callnode.get(requestId);
        var callCmd = DataOper.getInst().callcmd.get(requestId);
        cc.log("callCmd=" + callCmd + "/ln=" + DataOper.getInst().callcmd.maps.length + "'" + DataOper.getInst().callfuncs.maps.length + "'" + DataOper.getInst().callnode.maps.length);
        DataOper.getInst().callfuncs.clear(requestId);
        DataOper.getInst().callnode.clear(requestId);
        DataOper.getInst().callcmd.clear(requestId);

        if (xhr.status >= 200 && xhr.status < 300 || xhr.status === 304) {
            //取http头
            //命令号
            var cmd = xhr.getResponseHeader("cmd");
            cmd = parseInt(cmd);
            //res
            var res = xhr.getResponseHeader("res");
            //msg
            var msg = xhr.getResponseHeader("msg");
            msg = decodeURIComponent(msg);
            //sig
            var sig = xhr.getResponseHeader("sig");
            cc.log("xhr.status=" + xhr.status + "|re=" + res);

            if (res == 0) {
                //取body
                var body = xhr.responseText;
                //md5验证
                var t_sig = CryptoJS.MD5(body);
                var t_sig_str = new String(t_sig);
                var sig_str = new String(sig);
                t_sig_str = t_sig_str.trim();
                sig_str = sig_str.trim();

                if (t_sig_str == sig_str) {
                    console.log("valify right");
                    DataOper.getInst().parserServerData(body, cmd);
                    callFunc(cmd, res, msg, callNode);

                    //更新账户余额
                    //初始化调过了，不调了。
                    if (!CC_JSB) {
                        if (window.aliLotteryCasinoSDK) {
                            switch (cmd) {
                                case 101: //bet
                                case 102: //clear
                                case 103:
                                    //reward
                                    {
                                        window.aliLotteryCasinoSDK.updateUserInfo();
                                    }
                                    break;
                                default:
                                    break;
                            }
                        }
                    }
                } else {
                    callFunc(cmd, -1, "加密验证错误", callNode);
                }
            } else {
                console.log("报错---res:" + res + "----msg:" + msg);

                //纯业务logic
                if (cmd == 100 && res == 999999) {
                    NetData.NetData.getInst().initFlag = 2;
                    NetData.NetData.getInst().stopSellingDesc = msg;
                }
                //end 业务
                callFunc(cmd, res, msg, callNode);
            }
        } else {
            //联网失败
            console.log("http status:" + xhr.status + "|callCmd=" + callCmd);
            callFunc(callCmd, -1, "网络可能不好哦，请重试", callNode);
        }
    },

    /**
     *解析服务器返回数据
     * @param data
     * @param cmd
     */
    parserServerData: function parserServerData(data, cmd) {
        //gzip解压
        //data = data;
        //Base64
        //data = Base64.decode(data);
        //aes解密
        data = this.AESDecrypt(data, this.aesKey);
        var iNum1 = parseInt(cmd);

        if (iNum1 != 105) {
            console.log("data = " + data + ", cmd = " + cmd);
        }

        switch (iNum1) {
            case 100:
                {
                    this.parserInit(data);
                }
                break;
            case 101:
                {
                    this.parserBet(data);
                }
                break;
            case 102:
                {
                    this.parseClear(data);
                }
                break;
            case 103:
                {
                    this.parserReward(data);
                }
                break;
            case 104:
                {
                    this.parseSecondData(data);
                }
                break;
            case 105:
                {
                    this.parseTable(data);
                }
                break;
            case 106:
                {
                    this.parseOrderList(data);
                }
                break;
            case 107:
                {
                    this.parserHistory(data);
                }
                break;
            default:
                break;
        }
    },

    //AES加密
    AESEncryption: function AESEncryption(data, aesKey) {
        var key = CryptoJS.enc.Utf8.parse(aesKey);
        var iv = CryptoJS.enc.Utf8.parse(aesKey);
        var srcs = CryptoJS.enc.Utf8.parse(data);
        var encrypted = CryptoJS.AES.encrypt(srcs, key, { iv: iv, mode: CryptoJS.mode.ECB });
        return encrypted.toString();
    },

    //AES解密
    AESDecrypt: function AESDecrypt(data, aesKey) {
        var key = CryptoJS.enc.Utf8.parse(aesKey);
        var iv = CryptoJS.enc.Utf8.parse(aesKey);
        var decrypt = CryptoJS.AES.decrypt(data, key, { iv: iv, mode: CryptoJS.mode.ECB });
        return CryptoJS.enc.Utf8.stringify(decrypt).toString();
    },

    /**
     * 解析初始化
     * @param data
     */
    parserInit: function parserInit(data) {
        var netData = NetData.NetData.getInst();
        netData.initData = JSON.parse(data);
        cc.log("netData.initData.oddsList ", netData.initData.oddsList);
        netData.session = netData.initData.session;
        netData.periodId = netData.initData.periodId;
        netData.ticketNo = netData.initData.ticketNo;
        netData.betLimit = netData.initData.betLimit;
        netData.totalBetLimit = netData.initData.totalBetLimit;

        var periodEndTime = null;
        if (netData.initData.status == 1 || netData.initData.status == 2) {
            netData.timeFlag = 1;
            periodEndTime = netData.initData.periodEndTime1;
        } else if (netData.initData.status == 3 || netData.initData.status == 4) {
            netData.timeFlag = 2;
            periodEndTime = netData.initData.periodEndTime2;
        }

        if (periodEndTime != null) {
            netData.lotteryId = netData.initData.lotteryId;
            netData.lotteryIndex = netData.initData.lotteryIndex;

            var te = new Date();
            var localTime = te.getTime();
            var severTime = netData.initData.serverTime;
            netData.receiveTime = localTime - severTime;
            netData.secs = Math.floor((periodEndTime - severTime) / 1000 - netData.betThreshold - 3);
            cc.log("receiveTime=" + netData.receiveTime + "|" + netData.secs);
        }
        //
        netData.initFlag = 1;
    },

    /**
     * 解析投注
     */
    parserBet: function parserBet(data) {
        var netData = NetData.NetData.getInst();
        var objRoot = JSON.parse(data);
        netData.betLimit = objRoot.betLimit;
        netData.totalBetLimit = objRoot.totalBetLimit;
        netData.ticketNo = objRoot.ticketNo;

        var te = new Date();
        var localTime = te.getTime();
        var severTime = objRoot.serverTime;
        var tmp = localTime - severTime;

        /*
        if(tmp < netData.receiveTime){
            netData.receiveTime = tmp;
            netData.secs = Math.floor((netData.betData.periodEndTime - severTime) / 1000 - netData.betThreshold - 3);
            cc.log("receiveTime=" + netData.receiveTime + "|" + netData.secs);
        }
        */
    },

    parseClear: function parseClear(data) {
        var netData = NetData.NetData.getInst();
        var objRoot = JSON.parse(data);
        netData.ticketNo = "";
        netData.betLimit = netData.initData.betLimit;
        netData.totalBetLimit = netData.initData.totalBetLimit;
        var te = new Date();
        var localTime = te.getTime();
        var severTime = objRoot.serverTime;
        var tmp = localTime - severTime;
        /*
        if(tmp < netData.receiveTime){
            netData.receiveTime = tmp;
            netData.secs = Math.floor((objRoot.periodEndTime - severTime) / 1000 - netData.betThreshold - 3);
            cc.log("receiveTime=" + netData.receiveTime + "|" + netData.secs);
        }
        */
    },

    /**
     * 结算
     */
    parserReward: function parserReward(data) {
        var netData = NetData.NetData.getInst();
        var objRoot = JSON.parse(data);
        netData.rewardData = objRoot;
        // netData.rewardData = JSON.parse(data);      

        netData.periodId = netData.rewardData.nextPeriodId;
        netData.initData.periodEndTime2 = objRoot.periodEndTime2;

        if (objRoot.periodEndTime1 != undefined) {
            var te = new Date();
            var localTime = te.getTime();
            var severTime = objRoot.serverTime;
            netData.receiveTime = localTime - severTime;
            netData.secs = Math.floor((objRoot.periodEndTime1 - severTime) / 1000 - netData.betThreshold - 3);
            cc.log("receiveTime=" + netData.receiveTime + "|" + netData.secs);
        }
    },

    parseTable: function parseTable(data) {
        var netData = NetData.NetData.getInst();
        var objRoot = JSON.parse(data);
        var te = new Date();
        var localTime = te.getTime();
        var severTime = objRoot.serverTime;
        var tmp = localTime - severTime;

        /*
        if(tmp < netData.receiveTime){
            netData.receiveTime = tmp; 
            netData.secs = Math.floor((objRoot.periodEndTime - severTime) / 1000 - netData.betThreshold - 3);
            cc.log("receiveTime=" + netData.receiveTime + "|" + netData.secs);
        }
        */

        //解析list
        netData.tableArray = [];
        netData.tableArray = objRoot.list;
    },

    parseSecondData: function parseSecondData(data) {
        var netData = NetData.NetData.getInst();
        var objRoot = JSON.parse(data);
        netData.secondData = objRoot;
        netData.timeFlag = 2;
        var severTime = objRoot.serverTime;
        netData.secs = Math.floor((netData.initData.periodEndTime2 - severTime) / 1000 - netData.betThreshold - 3);

        /*
              var te = new Date();
              let localTime = te.getTime();
              let severTime = objRoot.serverTime;
              let tmp = localTime - severTime;
               if(tmp < netData.receiveTime){
                  netData.receiveTime = tmp; 
                  netData.secs = Math.floor((netData.initData.periodEndTime2 - severTime) / 1000 - netData.betThreshold - 3);
                  cc.log("receiveTime=" + netData.receiveTime + "|" + netData.secs);
              }
              */
    },

    parseOrderList: function parseOrderList(data) {
        var netData = NetData.NetData.getInst();
        var objRoot = JSON.parse(data);
        netData.orderList = [];
        netData.orderList = objRoot.data;
    },

    parserHistory: function parserHistory(data) {
        var netData = NetData.NetData.getInst();
        var objRoot = JSON.parse(data);
        netData.historyList = [];
        netData.historyList = objRoot.historyList;
    },

    /**
     * 初始化
     * @param
     * 
     */
    getInit: function getInit(session, callFunc, self) {
        if (session == null) {
            this.requestData = "{}";
        } else {
            var obj = new Object();
            obj.session = session;
            this.requestData = JSON.stringify(obj);
        }

        //提前初始化
        NetData.NetData.getInst().initFlag = 0;
        //设置命令号，每个请求都不一样
        this.headerCmd = 100;
        //请求网络
        this.request(callFunc, self);
    },

    /**
     * 投注
     * @param ticket_no 订单号，首次投注为空
     * @param step 步数
     * @Parma trans_data 数据交互
     */
    getBet: function getBet(callFunc, self) {
        var netData = NetData.NetData.getInst();
        this.requestData = "";
        //拼成json串，每个请求都不一样
        var obj = new Object();
        var te = new Date();
        obj.tid = te.getTime().toString();
        te = null;
        obj.betList = netData.reqBetList;
        obj.periodId = netData.periodId;
        obj.timeFlag = netData.timeFlag;
        obj.session = netData.session;
        this.requestData = JSON.stringify(obj);
        obj = null;
        //设置命令号，每个请求都不一样
        this.headerCmd = 101;
        //请求网络
        this.request(callFunc, self);
    },

    getClear: function getClear(callFunc, self) {
        var netData = NetData.NetData.getInst();
        this.requestData = "";
        //拼成json串，每个请求都不一样
        var obj = new Object();
        obj.periodId = netData.periodId;
        obj.session = netData.session;
        obj.timeFlag = netData.timeFlag;
        this.requestData = JSON.stringify(obj);
        obj = null;
        //设置命令号，每个请求都不一样
        this.headerCmd = 102;
        //请求网络
        this.request(callFunc, self);
    },

    /**
     * 结算
     * @param ticket_no 订单号
     */
    getReward: function getReward(callFunc, self) {
        this.requestData = "";
        //拼成json串，每个请求都不一样
        var obj = new Object();
        obj.periodId = NetData.NetData.getInst().periodId;
        obj.session = NetData.NetData.getInst().session;
        obj.ticketNo = NetData.NetData.getInst().ticketNo;

        // obj.uids = new Array();
        obj.uids = [12, 123];
        // for(let i = 0; i < NetData.NetData.getInst().tableArray.length(); ++i){
        //     obj.uids.push(NetData.NetData.getInst().tableArray[i].uid);
        // }

        this.requestData = JSON.stringify(obj);
        obj = null;
        //设置命令号，每个请求都不一样
        this.headerCmd = 103;
        //请求网络
        this.request(callFunc, self);
    },

    getTable: function getTable(callFunc, self) {
        this.requestData = "";
        //拼成json串，每个请求都不一样
        var obj = new Object();
        obj.list = NetData.NetData.getInst().reqTableArray;
        obj.periodId = NetData.NetData.getInst().periodId;
        obj.session = NetData.NetData.getInst().session;
        obj.timeFlag = NetData.NetData.getInst().timeFlag;
        this.requestData = JSON.stringify(obj);
        obj = null;
        this.headerCmd = 105;
        //请求网络
        this.request(callFunc, self);
    },

    /**
     * 获取二阶段数据
     */
    getSecondData: function getSecondData(callFunc, self) {
        this.requestData = "";
        //拼成json串，每个请求都不一样
        var obj = new Object();
        obj.periodId = NetData.NetData.getInst().periodId;
        obj.session = NetData.NetData.getInst().session;
        this.requestData = JSON.stringify(obj);
        obj = null;
        this.headerCmd = 104;
        //请求网络
        this.request(callFunc, self);
    },

    getOrderList: function getOrderList(callFunc, self) {
        this.requestData = "";
        this.headerCmd = 106;
        //请求网络
        this.request(callFunc, self);
    },

    getHistory: function getHistory(callFunc, self) {
        this.requestData = "";
        //拼成json串，每个请求都不一样
        var obj = new Object();
        obj.session = NetData.NetData.getInst().session;
        this.requestData = JSON.stringify(obj);
        obj = null;
        this.headerCmd = 107;
        //请求网络
        this.request(callFunc, self);
    }
});

module.exports = {
    DataOper: DataOper
};

cc._RFpop();
},{"NetData":"NetData","aes":"aes","core":"core"}],"HelloWorld":[function(require,module,exports){
"use strict";
cc._RFpush(module, '280c3rsZJJKnZ9RqbALVwtK', 'HelloWorld');
// Script/HelloWorld.js

'use strict';

cc.Class({
    extends: cc.Component,

    properties: {
        label: {
            default: null,
            type: cc.Label
        },
        // defaults, set visually when attaching this script to the Canvas
        text: 'Hello, World!'
    },

    // use this for initialization
    onLoad: function onLoad() {
        this.label.string = this.text;
    },

    // called every frame
    update: function update(dt) {}
});

cc._RFpop();
},{}],"Help":[function(require,module,exports){
"use strict";
cc._RFpush(module, 'cdd59b7NnNFr59YCYK5OLHf', 'Help');
// Script/Help.js

"use strict";

var NetData = require("NetData");
var Game = require("game");

cc.Class({
    extends: cc.Component,

    properties: {
        //游戏帮助
        uiBlack: cc.Node,
        testNode: cc.Node,
        scrollView: cc.Node,
        content: cc.Node,
        view: cc.Node,
        lock: false,
        gameNode: cc.Node,
        imgArray: [cc.Sprite]
    },

    // use this for initialization
    onLoad: function onLoad() {
        this.netData = NetData.NetData.getInst();
        this.lock = true;
        var oriP1 = this.testNode.convertToWorldSpaceAR(cc.v2(0, 0));
        this.oriY = this.testNode.y - oriP1.y;
        //console.log("oriY=" + this.node.y + "|" + oriP1.y);        

        var callFunc_1 = cc.callFunc(function () {
            this.lock = false;
            var se = cc.director.getWinSize();
            this.scrollView.height = se.height * 0.8;
            this.scrollView.getChildByName("view").height = this.scrollView.height;
            this.node.height = this.scrollView.height;
            this.node.y = this.oriY - this.scrollView.height;
            //console.log("ny=" + this.node.y);
        }, this);

        this.node.runAction(cc.sequence(cc.delayTime(0.1), callFunc_1));

        this.uiBlack.on(cc.Node.EventType.TOUCH_START, function (event) {
            event.stopPropagation();
            this.close();
        }, this);
    },

    close: function close() {
        if (!this.lock) {
            this.uiBlack.active = false;

            var call3 = cc.callFunc(function () {
                this.netData.helpShowFlag = false;
            }, this);

            this.node.runAction(cc.sequence(cc.moveTo(0.3, cc.v2(0, this.oriY - this.scrollView.height)), call3));
        }
    },

    downHelp: function downHelp() {
        var self = this;
        var spt = this.gameNode.getComponent(Game);
        spt.showWaitLayer();
        var rh = 0;

        cc.loader.load(this.netData.rulePics, null, function (errors, results) {
            if (errors) {
                for (var i = 0; i < errors.length; i++) {
                    console.log('Error url [' + errors[i] + ']: ' + results.getError(errors[i]));
                }
            }
            // cc.log("results is %% ", results.getContent.length);
            var len = self.netData.rulePics.length;

            for (var _i = 0; _i < len; _i++) {

                var aTex = results.getContent(self.netData.rulePics[_i]);
                console.log(self.netData.rulePics[_i] + "|" + aTex);
                var sf = new cc.SpriteFrame();
                sf.setTexture(aTex);
                self.imgArray[_i].spriteFrame = sf;
                rh += self.imgArray[_i].node.height;
                cc.log("height is $$$ ", self.imgArray[_i].node.height);
                //支持多张图排版（2017-03-27 pm：520）
                if (_i > 0) {

                    var index = _i - 1;
                    var ht = self.imgArray[index].node.height;
                    self.imgArray[_i].node.y = self.imgArray[index].node.y - ht + 1;
                    // cc.log("height is $$$ ", ht);
                }
            }

            // if(len == 2){
            //     let ht = self.imgArray[0].node.height;
            //     self.imgArray[1].node.y = -ht;
            // }

            self.content.height = rh;
            spt.hideWaitLayer();
            self.initHelp();
        });
    },

    initHelp: function initHelp() {
        if (!this.lock) {
            console.log("initHelp");
            this.netData.helpShowFlag = true;
            this.lock = true;
            this.scrollView.getComponent(cc.ScrollView).scrollToOffset(cc.p(0, 0), 0.1);
            var callback = cc.callFunc(this.selectShowCallBack, this);
            this.node.runAction(cc.sequence(cc.moveTo(0.3, cc.p(0, this.oriY)), callback));
        }
    },

    selectShowCallBack: function selectShowCallBack() {
        this.uiBlack.active = true;
        this.lock = false;
    }
});

cc._RFpop();
},{"NetData":"NetData","game":"game"}],"Init":[function(require,module,exports){
"use strict";
cc._RFpush(module, '9e257NxGEhC4Z+E/o15ic/D', 'Init');
// Script/Init.js

"use strict";

var DataOper = require("DataOper");
var NetData = require("NetData");

cc.Class({
    extends: cc.Component,

    /*ctor: function() {
        
    },*/

    init: function init() {
        var self = this;
        if (!CC_JSB && window.aliLotteryCasinoSDK) {
            document.addEventListener('casino:init', function (e) {

                /************************20170509在1.4.2修改获取gameToken****************************/

                var dataOper = DataOper.DataOper.getInst();
                dataOper.gameToken = e.data.accessToken;

                if (dataOper.gameToken === null) {
                    dataOper.gameToken = "26a09ca052d4c7dcde13449ba1b735df-11-1151-1051";
                    var tok = dataOper.GetQueryString("tok");

                    if (tok) {
                        dataOper.headerToken = tok;
                        console.log("tok=" + dataOper.headerToken);
                    } else {
                        dataOper.headerToken = "0";
                    }
                    //testsssssss
                    /*var myDate = new Date();
                    this.headerToken = myDate.getTime();*/
                }

                console.log("this.gameToken = " + dataOper.gameToken);
                console.log("this.headerToken = " + dataOper.headerToken);

                /************************20170509在1.4.2修改获取gameToken ****************************/

                self.fetch(function (isError) {
                    console.log(isError);
                    if (!isError) {
                        // 合并资源
                        window.aliLotteryCasinoSDK.mergeResources();
                        // 显示 loading
                        window.aliLotteryCasinoSDK.initLoading();
                        // 运行游戏
                        window.aliLotteryCasinoSDK.runGame();
                    } else {
                        window.aliLotteryCasinoSDK.showError();
                    }
                });
            }, false);
        } else {
            self.fetch();
        }
    },

    fetch: function fetch(callback) {
        console.log("VersionN:201705251200");
        cc.log("fetch");
        this.initData = {};
        var self = this;
        var dataOper = DataOper.DataOper.getInst();
        dataOper.getInit(null, function (cmd, res, msg, self) {
            // 判断是否成功并存储初始化
            var isError = false;

            //每日****游戏暂停运营（客户端处理）
            if (res == 100007) {
                isError = false;
            } else if (res != 0) {
                isError = true;
            } else {
                // if(NetData.NetData.getInst().status == 1){
                //     var te = new Date();
                //     self.timeStamp = te.getTime();
                //     cc.log("timeStamp is ", self.timeStamp);
                // } 

                var te = new Date();
                self.timeStamp = te.getTime();
                cc.log("timeStamp is ", self.timeStamp);
            }

            cc.log('fetch init data');
            cc.log(cmd, res, msg);
            self.initData.cmd = cmd;
            self.initData.res = res;
            self.initData.msg = msg;
            callback && callback(isError);
        }, this);
    }
});

cc._RFpop();
},{"DataOper":"DataOper","NetData":"NetData"}],"NetData":[function(require,module,exports){
"use strict";
cc._RFpush(module, '2c0127/qANHkKFLguhv7AkS', 'NetData');
// Script/network/NetData.js

"use strict";

var NetData = cc.Class({
    statics: {
        g_Inst: null,
        s_index: 0,

        getInst: function getInst() {

            if (NetData.g_Inst === null) {
                NetData.g_Inst = new NetData();
                NetData.g_Inst.init();
            }
            return NetData.g_Inst;
        },

        destoryInst: function destoryInst() {

            if (NetData.g_Inst !== null) {
                NetData.g_Inst = null;
            }
        }
    },

    properties: {
        //请求参数
        reqBetList: [], //投注数据
        reqTableArray: [], //请求用同桌人列表


        //响应
        timeFlag: 1, //投注阶段 1-第一阶段  2-第二阶段
        session: null,
        periodId: 1, //期次
        receiveTime: 0, //接收时间差
        secs: 0, //彩期剩余秒数
        betThreshold: 0,
        ticketNo: "", //订单号
        betLimit: 0, //投注限额
        totalBetLimit: 0, //总投注限额

        tableArray: [], //同桌人
        initData: null, //初始化data
        rewardData: null, //结算data
        secondData: null, //第二阶段数据data
        historyList: [], //历史走势
        orderList: [], //订单data

        //sdk        
        initFlag: 0 //提前初始化 0:没好  1:好了 2.停售
    },

    init: function init() {},

    clear: function clear() {}
});

module.exports = {
    NetData: NetData
};

cc._RFpop();
},{}],"Notouch":[function(require,module,exports){
"use strict";
cc._RFpush(module, 'b71281epI1FgLCfftSwge5e', 'Notouch');
// Script/Tools/Notouch.js

"use strict";

cc.Class({
    extends: cc.Component,

    properties: {
        // foo: {
        //    default: null,
        //    url: cc.Texture2D,  // optional, default is typeof default
        //    serializable: true, // optional, default is true
        //    visible: true,      // optional, default is true
        //    displayName: 'Foo', // optional
        //    readonly: false,    // optional, default is false
        // },
        // ...
    },

    // use this for initialization
    onLoad: function onLoad() {
        this.node.on(cc.Node.EventType.TOUCH_START, function (event) {
            //不再派发事件
            event.stopPropagation();

            if (this.obj != undefined) {
                this.fun(this.obj);
                this.obj = undefined;
                this.fun = undefined;
            }
        }, this);
    },

    init: function init(obj, fun) {
        this.obj = obj;
        this.fun = fun;
    }

});

cc._RFpop();
},{}],"Power":[function(require,module,exports){
"use strict";
cc._RFpush(module, '21c82a03dJILKwxwhzMrsbH', 'Power');
// Script/Power.js

"use strict";

var NetData = require("NetData");

cc.Class({
    extends: cc.Component,

    properties: {

        selfChip1SkineNode: {
            default: [],
            type: [cc.Node]
        },

        selfChip2SkineNode: {
            default: [],
            type: [cc.Node]
        },

        pukeHighLightNodeArray: {
            default: [],
            type: [cc.Node]
        },

        betHighLightLayer: cc.Node,

        selfChipNode: {
            default: [],
            type: [cc.Node]
        },

        othersPositionNode: cc.Node,

        pokersNode: {
            default: [],
            type: [cc.Node]
        },

        noPokersNode: {
            default: [],
            type: [cc.Node]
        },

        historysListNode: {
            default: [],
            type: [cc.Node]
        },

        oddsLabel: cc.Node,

        pokerNameNode: cc.Node,

        pokerNoTouchLayer: cc.Node,

        options: "", //选项说明
        //势力
        powerFlag: true, //是否势力
        powerId: 0, //势力id
        pockers: [], //牌型
        historys: [], //胜负走势

        //投注项
        betFlag: true, //是否投注项
        betId: 0, //投注项id
        odds1: 1, //一阶段赔率
        odds2: 1, //二阶段赔率
        oddType: 0, //赔率变化类型  0-降低  1-上升  2-不变
        betStatus: 1, //是否可投注, 1-可投 0-不可投
        betNumTotal1: 0, //第一阶段总投注额
        betNumTotal2: 0, //第二阶段投注总额
        betNum: 0, //单次投注额，用于记录投注批次，失败的要退回来
        betList: [], //最后一次投注列表，用于投注，把所有投注项的这个数组收集起来就是真正的投注列表
        chipColor: 0, //筹码颜色  0-  1-  2-  3-
        ligthFlag: false, //投注项是否高亮

        //结算状态
        win: -1, //-1: 未开奖 1:胜利，0:负，2:平
        type: -1, //-1: 未开奖 0:散牌，1:散牌，2:对子，3：顺子，4:同花，5:同花顺，6:豹子
        pokerLight: [], //扑克高亮 空为全不亮， [0, 1, 2]全亮， [0, 2]亮两个

        //飞筹码
        chipPositions: [], //楼下5个筹码的相对位置
        playerPositions: [], //玩家头像相对位置，包括自己的（自己的筹码飞回）
        currentChipIndex: 0 },

    // use this for initialization
    onLoad: function onLoad() {
        this.node.on(cc.Node.EventType.TOUCH_START, function (event) {}, this);

        this.node.on(cc.Node.EventType.TOUCH_END, function (event) {
            cc.log("TOUCH_END!!!");
            if (this.betFlag && this.betStatus) {
                //投注操作，回调到game去判断登录状态、余额等
                var onFunction = cc.find('Canvas').getComponent('game');

                if (onFunction.clearingFlag) {
                    onFunction.showToast("正在为您撤单，请稍后下单");
                } else {
                    onFunction.powerBet(this.addselfChip, this);
                }
            }
        }, this);
    },

    /**
     * 重置info，下一期开始时调用
     */
    resetInfo: function resetInfo() {
        this.pockers = [];
        this.oddType = 2;
        this.betStatus = 1;
        this.betNumTotal1 = 0;
        this.betNumTotal2 = 0;
        this.betNum = 0;
        this.betList = [];
        this.win = -1;
        this.types = -1;
        this.pokerLight = [];
        this.ligthFlag = false;

        //清空桌面筹码
        if (this.betFlag) {
            this.selfChipNode[0].active = false;
            this.selfChipNode[1].active = false;
        }

        for (var j = 0; j < this.noPokersNode.length; j++) {
            this.noPokersNode[j].active = true;
            this.noPokersNode[j].setScale(1, 1);
        }

        if (this.pokersNode.length) {
            this.pokersNode[2].y = -161;
            this.noPokersNode[2].y = 0;
        }
    },

    /**
     * 更新选项info
     * @param status 100-初始化   101-投注  102-清空投注  103-结算  104-获取二阶段数据
     */
    updataInfo: function updataInfo(status) {
        var netData = NetData.NetData.getInst();

        if (status == 100) {
            var initData = netData.initData;
            if (this.powerFlag) {
                if (initData.pockerList) {
                    for (var i = 0; i < initData.pockerList.length; ++i) {
                        if (this.powerId == initData.pockerList[i].powerId) {
                            //cc.log("this.powerId ", this.powerId);
                            if (initData.pockerList[i].pockers) {
                                this.pockers = initData.pockerList[i].pockers;
                                //cc.log("this.pockers", this.pockers);
                            }

                            this.historys = initData.pockerList[i].historys;
                            break;
                        }
                    }
                }
            }

            if (this.betFlag) {
                for (var _i = 0; _i < initData.oddsList.length; ++_i) {
                    if (this.betId == initData.oddsList[_i].id) {
                        cc.log("odds2 ", initData.oddsList[_i].odds2);
                        this.options = initData.oddsList[_i].option;
                        this.odds1 = initData.oddsList[_i].odds1;

                        if (initData.oddsList[_i].odds2) {
                            this.odds2 = initData.oddsList[_i].odds2;
                        } else {
                            this.odds2 = 0;
                        }

                        this.betStatus = initData.oddsList[_i].status;
                        break;
                    }
                }

                //投注额,用于恢复
                if (initData.bets) {
                    for (var _i2 = 0; _i2 < initData.bets.length; ++_i2) {
                        if (initData.bets[_i2].id == this.betId) {
                            if (initData.bets[_i2].timeFlag == 1) {
                                this.betNumTotal1 = initData.bets[_i2].totalBet;
                            } else {
                                this.betNumTotal2 = initData.bets[_i2].totalBet;
                            }
                        }
                    }
                }
            }
        } else if (status == 101) {} else if (status == 102) {
            if (netData.timeFlag == 1) {
                this.betNumTotal1 = 0;
            } else {
                this.betNumTotal2 = 0;
            }

            // betList = [];
        } else if (status == 103) {
            var rewardData = netData.rewardData;
            if (this.powerFlag) {
                var lottery = rewardData.lottery;
                //var idstring = "power"+ this.powerId;

                // var pockers = lottery.cache.idstring.pockers;
                //this.win = lottery.cache.idstring.win;
                //this.types = lottery.cache.idstring.types;
                //this.historys.pop();
                // this.historys.unshift(this.win);
                //this.pockers.push(pockers);


                for (var _i3 = 0; _i3 < lottery.cache.length; ++_i3) {
                    if (lottery.cache[_i3].powerId == this.powerId) {
                        this.win = lottery.cache[_i3].win;
                        this.historys.pop();
                        this.historys.unshift(this.win);

                        this.type = lottery.cache[_i3].type;
                        this.pockers.push(lottery.cache[_i3].pockers[0]);
                        //cc.log("103 pockers length is ", this.pockers.length);
                        //牌型高亮
                        this.pokerLight = [];
                        if (this.type === 0 || this.type == 1) {
                            //散牌，都不亮
                        } else if (this.type == 2) {
                            //对子
                            if (this.pockers[0].val == this.pockers[1].val) {
                                this.pokerLight = [0, 1];
                            } else if (this.pockers[0].val == this.pockers[2].val) {
                                this.pokerLight = [0, 2];
                            } else if (this.pockers[1].val == this.pockers[2].val) {
                                this.pokerLight = [1, 2];
                            }

                            /*
                            //对子投注项高亮
                            if(this.betId == 5){
                                this.ligthFlag = true;
                            }
                            */
                        } else if (this.type == 6) {
                            this.pokerLight = [0, 1, 2];
                            /*
                            //三同号投注项高亮
                            if(this.betId == 6){
                                this.ligthFlag = true;
                            }
                            */
                        } else {
                            this.pokerLight = [0, 1, 2];
                            /*
                            //其他牌型投注项高亮
                            if(this.betId == 7){
                                this.ligthFlag = true;
                            }
                            */
                        }
                        break;
                    }
                }
            }

            if (this.betFlag) {
                for (var _i4 = 0; _i4 < rewardData.oddsList.length; ++_i4) {
                    if (this.betId == rewardData.oddsList[_i4].id) {
                        //cc.log("odds2 ", rewardData.oddsList[i].odds2);
                        this.options = rewardData.oddsList[_i4].option;
                        this.odds1 = rewardData.oddsList[_i4].odds;
                        //this.odds2 = rewardData.oddsList.oddsMetaDatas[i].odds2;
                        this.betStatus = 1;
                        break;
                    }
                }
            }
        } else if (status == 104) {
            var secondData = netData.secondData;
            if (this.powerFlag) {
                for (var _i5 = 0; _i5 < secondData.pockerList.length; ++_i5) {
                    if (this.powerId == secondData.pockerList[_i5].powerId) {
                        this.pockers = secondData.pockerList[_i5].pockers;
                        break;
                    }
                }
            }

            if (this.betFlag) {
                for (var _i6 = 0; _i6 < secondData.oddsList.length; ++_i6) {
                    if (this.betId == secondData.oddsList[_i6].id) {
                        this.options = secondData.oddsList[_i6].option;
                        //这里判断一下赔率是变大变小
                        this.odds1 = secondData.oddsList[_i6].odds1;
                        if (secondData.oddsList[_i6].odds2) {
                            this.odds2 = secondData.oddsList[_i6].odds2;
                        } else {
                            this.odds2 = 0;
                        }

                        if (this.odds2 > this.odds1) {
                            this.oddType = 1;
                        } else if (this.odds2 < this.odds1) {
                            this.oddType = 0;
                        } else {
                            this.oddType = 2;
                        }

                        this.betStatus = secondData.oddsList[_i6].status;
                        break;
                    }
                }
            }
        }
    },

    //更新UI
    updataUI: function updataUI(status) {
        var _this = this;

        if (this.powerFlag) {
            // for(var j = 0; j < this.noPokersNode.length; j ++)
            // {
            //     this.noPokersNode[j].active = true;
            // }

            var netData = NetData.NetData.getInst();

            var _loop = function _loop(_i7) {
                //this.noPokersNode[i].active = false;
                pokerNum = _this.pokersNode[_i7].getChildByName("num").getComponent(cc.Label);
                num = "";

                if (_this.pockers[_i7].val == 1) {
                    num = "A";
                } else if (_this.pockers[_i7].val == 11) {
                    num = "J";
                } else if (_this.pockers[_i7].val == 12) {
                    num = "Q";
                } else if (_this.pockers[_i7].val == 13) {
                    num = "K";
                } else {
                    num = _this.pockers[_i7].val;
                }
                //cc.log("pocker num is ", num);
                pokerNum.string = num;

                pokerType = _this.pokersNode[_i7].getChildByName("type").getComponent(cc.Label);
                color = "";

                switch (_this.pockers[_i7].color) {
                    case 1:
                        {
                            color = "红桃";
                        }
                        break;
                    case 2:
                        {
                            color = "方片";
                        }
                        break;
                    case 3:
                        {
                            color = "黑桃";
                        }
                        break;
                    case 4:
                        {
                            color = "梅花";
                        }
                        break;
                }
                pokerType.string = color;
                //cc.log("pocker color is ", color);
                self = _this;
                //跑一个翻牌的动画

                if (_i7 <= 1) {

                    if (_this.noPokersNode[_i7].active) {
                        _this.noPokersNode[_i7].runAction(cc.sequence(cc.scaleTo(0.2, 0, 1), cc.callFunc(function () {
                            self.noPokersNode[_i7].active = false;
                        })));
                        _this.pokersNode[_i7].runAction(cc.sequence(cc.scaleTo(0.2, 0, 1), cc.scaleTo(0.2, 1)));
                    }
                } else {
                    //开奖阶段，要一个一个出结果，根据powerid计算时机
                    var delay = (_this.powerId - 1) * 1.0;
                    _this.scheduleOnce(function () {
                        if (self.noPokersNode[_i7].active) {
                            self.noPokersNode[_i7].runAction(cc.sequence(cc.moveTo(0.4, cc.v2(0, -161)), cc.callFunc(function () {
                                self.noPokersNode[_i7].y = 0;
                            })));
                            self.pokersNode[_i7].runAction(cc.sequence(cc.moveTo(0.4, cc.v2(0, 0)), cc.callFunc(self.putStampOnAction, self, self)));
                        }
                    }, delay);
                }
            };

            for (var _i7 = 0; _i7 < this.pockers.length; _i7++) {
                var pokerNum;
                var num;
                var pokerType;
                var color;
                var self;

                _loop(_i7);
            }
        }

        for (var i = 0; i < this.pokerLight.length; i++) {
            var index = this.pokerLight[i];
            //this.pukeHighLightNodeArray[index].active = true;
        }

        if (this.betFlag) {
            var netData = NetData.NetData.getInst();
            if (netData.timeFlag == 1) {
                this.oddsLabel.getComponent(cc.Label).string = this.odds1 + "倍";
                this.oddsLabel.color = new cc.Color(255, 255, 255);
            } else {
                this.oddsLabel.getComponent(cc.Label).string = this.odds2 + "倍";
                if (this.oddType == 0) {
                    this.oddsLabel.color = new cc.Color(255, 0, 0);
                } else if (this.oddType == 1) {
                    this.oddsLabel.color = new cc.Color(45, 67, 100);
                } else {
                    this.oddsLabel.color = new cc.Color(255, 255, 255);
                }
            }
        }

        if (this.powerFlag && this.powerId != 1) {
            for (var i = 0; i < this.historysListNode.length; i++) {
                var historyIconNode = this.historysListNode[i];
                if (this.historys[i] == 1) //胜
                    {
                        historyIconNode.color = new cc.Color(255, 0, 0);
                    } else if (this.historys[i] == 0) //负
                    {
                        historyIconNode.Color = new cc.Color(45, 67, 100);
                    } else //平
                    {
                        historyIconNode.Color = new cc.Color(255, 255, 255);
                    }
            }
        }

        if (this.betFlag && !this.powerFlag) {

            if (this.betStatus == 1) {
                this.pokerNoTouchLayer.active = false;
            } else {
                this.pokerNoTouchLayer.active = true;
            }

            if (this.ligthFlag == true) //中奖结果高亮
                {
                    this.betHighLightLayer.active = true;
                } else {
                this.betHighLightLayer.active = false;
            }
        }
    },

    //飞结果，盖戳
    putStampOnAction: function putStampOnAction(target, self) {
        if (self.powerId == 1) {
            return;
        }
        //cc.log("flyStamp!!!");
        var netData = NetData.NetData.getInst();
        var rewardData = netData.rewardData;
        var convertNode = cc.find("Canvas/convertNode");
        var convertNodeJS = convertNode.getComponent("convertNode");
        convertNodeJS.flyRewardNode(self.win, self.powerId);

        if (self.powerId == 2) {
            //10s收回
            self.scheduleOnce(self.getback, 5);
        }
    },

    getback: function getback() {
        var gameJS = cc.find("Canvas").getComponent("game");
        gameJS.rewardFlyFinishedCallback();
    },

    /**
     * 初始化筹码
     */
    initSelfChip: function initSelfChip(timeFlag, chipNum) {
        this.selfChipNode[timeFlag - 1].active = true;
        this.selfChipNode[timeFlag - 1].zIndex = 500;
        var label = this.selfChipNode[timeFlag - 1].getChildByName("Label").getComponent(cc.Label);
        label.string = chipNum;
    },

    /**
     * 恢复筹码飞回
     * @param chipNum 筹码量
     */
    resumeSelfChip: function resumeSelfChip(chipNum) {
        var netData = NetData.NetData.getInst();
        //计算哪个筹码最接近chipNum
        var chipIndex = 0;
        for (var i = 0; i < netData.initData.betList.length; ++i) {
            if (chipNum >= netData.initData.betList[i]) {
                chipIndex = i;
            }
        }

        //跑动画，目标位置是个固定值，一阶段和二阶段分别固定一个筹码位置
        //跑完动画后，更新投注额的label
        if (this.betFlag) {
            var convertNode = cc.find("Canvas/convertNode");
            var convertNodeJS = convertNode.getComponent("convertNode");
            convertNodeJS.chipFlyAction(chipNum, chipIndex, this.betId - 1, true, self);
        }
    },

    /**
     * 自己投注飞筹码
     * @param chipIndex 楼下筹码的index
     */
    addselfChip: function addselfChip(chipIndex, self) {
        self.currentChipIndex = chipIndex;
        var netData = NetData.NetData.getInst();
        var bet = netData.initData.betList[chipIndex];

        //投注总额变化
        if (netData.timeFlag == 1) {
            self.betNumTotal1 += bet;
        } else {
            self.betNumTotal2 += bet;
        }

        //检查是否已经存在该类型筹码
        var exitFlag = false;
        for (var i = 0; i < self.betList.length; ++i) {
            if (self.betList[i].bet == bet) {
                self.betList[i].num++;
                exitFlag = true;
                break;
            }
        }

        if (!exitFlag) {
            var obj = new Object();
            obj.id = self.betId;
            obj.bet = bet;
            obj.num = 1;
            if (netData.timeFlag == 1) {
                obj.odds = self.odds1;
            } else {
                obj.odds = self.odds2;
            }

            self.betList.push(obj);
        }

        //跑动画，目标位置是个固定值，一阶段和二阶段分别固定一个筹码位置
        //跑完动画后，更新投注额的label
        if (self.betFlag) {
            var convertNode = cc.find("Canvas/convertNode");
            var convertNodeJS = convertNode.getComponent("convertNode");
            convertNodeJS.chipFlyAction(bet, chipIndex, self.betId - 1, true, self);
        }
    },

    flyChipNodeFinished: function flyChipNodeFinished(sender, flag) {
        var flag = flag;
        var self = sender;
        var netData = NetData.NetData.getInst();
        var index = netData.timeFlag - 1;
        if (flag) {
            self.selfChipNode[index].active = flag;
            self.selfChipNode[index].zIndex = 500;
            var label = self.selfChipNode[index].getChildByName("Label").getComponent(cc.Label);
            if (netData.timeFlag == 1) {
                label.string = self.betNumTotal1;
            } else {
                label.string = self.betNumTotal2;
            }

            self.setSkinWithTag(self.currentChipIndex);
        }
    },

    /**
    * 设置筹码皮肤
    * @param tag 对应的筹码编号(20 50 100 500 1000 gray other) eg: 0 1 2 3 4 5 6
    */
    setSkinWithTag: function setSkinWithTag(tag) {
        var netData = NetData.NetData.getInst();
        if (netData.timeFlag == 1) {
            for (var i = 0; i < this.selfChip1SkineNode.length; i++) {
                if (tag == i) {
                    this.selfChip1SkineNode[i].activate = true;
                } else {
                    this.selfChip1SkineNode[i].activate = false;
                }
            }
        } else {
            for (var i = 0; i < this.selfChip1SkineNode.length; i++) {
                if (tag == i) {
                    this.selfChip1SkineNode[i].activate = true;
                } else {
                    this.selfChip1SkineNode[i].activate = false;
                }
            }
        }
    },

    /**
     * 自己筹码飞回
     * @param chipNum  飞回的筹码数额
     */
    reduceSelfChip: function reduceSelfChip() {
        var netData = NetData.NetData.getInst();
        if (netData.timeFlag == 1) {
            this.betNumTotal1 -= this.betNum;
        } else {
            this.betNumTotal2 -= this.betNum;
        }

        var ser = null;
        var totalMoney = "";
        if (netData.timeFlag == 1) {
            ser = this.selfChipNode[0];
            totalMoney = this.betNumTotal1;
        } else {
            ser = this.selfChipNode[1];
            totalMoney = this.betNumTotal2;
        }
        if (ser.active) {
            var flag = false;
            if (totalMoney > 0) {
                flag = true;
            }
            //先隐藏
            ser.active = flag;
            ser.zIndex = 500;
            var label = ser.getChildByName("Label").getComponent(cc.Label);
            label.string = totalMoney;

            //再找筹码飞
            var convertNode = cc.find("Canvas/convertNode");
            var convertNodeJS = convertNode.getComponent("convertNode");
            // var flag = false;
            // if(totalMoney>0)
            // {
            //     flag = true;
            // }
            convertNodeJS.chipFlyAction(this.betNum, this.currentChipIndex, this.betId - 1, flag, this);
        }
    },

    /**
     *  动作飞回来
     */
    flyBack: function flyBack() {
        this.clearSelfChip();
    },

    /**
     * 清空筹码
     */
    clearSelfChip: function clearSelfChip() {
        var netData = NetData.NetData.getInst();
        if (netData.timeFlag == 1) {
            this.betNum = this.betNumTotal1;
        } else {
            this.betNum = this.betNumTotal2;
        }
        this.reduceSelfChip();
    },

    /**
     * 其他玩家飞筹码
     * @param seatIndex 其他玩家座位号
     */
    addOtherChip: function addOtherChip(seatIndex) {}

    // called every frame, uncomment this function to activate update callback
    // update: function (dt) {

    // },
});

cc._RFpop();
},{"NetData":"NetData"}],"WaitScript":[function(require,module,exports){
"use strict";
cc._RFpush(module, 'f819ds8PopLZZ+dyHaJMjdF', 'WaitScript');
// Script/Tools/WaitScript.js

"use strict";

cc.Class({
    extends: cc.Component,

    properties: {},

    // use this for initialization
    onLoad: function onLoad() {
        this.angle = 0;
    },

    // called every frame, uncomment this function to activate update callback
    update: function update(dt) {
        this.angle += dt * 360;

        if (this.angle > 360) {
            this.angle -= 360;
        }

        this.node.rotation = this.angle;
    }
});

cc._RFpop();
},{}],"aes":[function(require,module,exports){
"use strict";
cc._RFpush(module, '02d8bZs2vRKGJgbl2iiyPN7', 'aes');
// Script/network/aes/aes.js

"use strict";

var CryptoJS = require("./core");require("../aes/md5");require("../aes/enc-base64");require("../aes/evpkdf");require("../aes/cipher-core");require("../aes/mode-ecb");(function () {
  var C = CryptoJS;var C_lib = C.lib;var BlockCipher = C_lib.BlockCipher;var C_algo = C.algo;var SBOX = [];var INV_SBOX = [];var SUB_MIX_0 = [];var SUB_MIX_1 = [];var SUB_MIX_2 = [];var SUB_MIX_3 = [];var INV_SUB_MIX_0 = [];var INV_SUB_MIX_1 = [];var INV_SUB_MIX_2 = [];var INV_SUB_MIX_3 = [];(function () {
    var d = [];for (var i = 0; i < 256; i++) {
      if (i < 128) {
        d[i] = i << 1;
      } else {
        d[i] = i << 1 ^ 283;
      }
    }var x = 0;var xi = 0;for (var i = 0; i < 256; i++) {
      var sx = xi ^ xi << 1 ^ xi << 2 ^ xi << 3 ^ xi << 4;sx = sx >>> 8 ^ sx & 255 ^ 99;SBOX[x] = sx;INV_SBOX[sx] = x;var x2 = d[x];var x4 = d[x2];var x8 = d[x4];var t = d[sx] * 257 ^ sx * 16843008;SUB_MIX_0[x] = t << 24 | t >>> 8;SUB_MIX_1[x] = t << 16 | t >>> 16;SUB_MIX_2[x] = t << 8 | t >>> 24;SUB_MIX_3[x] = t;var t = x8 * 16843009 ^ x4 * 65537 ^ x2 * 257 ^ x * 16843008;INV_SUB_MIX_0[sx] = t << 24 | t >>> 8;INV_SUB_MIX_1[sx] = t << 16 | t >>> 16;INV_SUB_MIX_2[sx] = t << 8 | t >>> 24;INV_SUB_MIX_3[sx] = t;if (!x) {
        x = xi = 1;
      } else {
        x = x2 ^ d[d[d[x8 ^ x2]]];xi ^= d[d[xi]];
      }
    }
  })();var RCON = [0, 1, 2, 4, 8, 16, 32, 64, 128, 27, 54];var AES = C_algo.AES = BlockCipher.extend({ _doReset: function _doReset() {
      var key = this._key;var keyWords = key.words;var keySize = key.sigBytes / 4;var nRounds = this._nRounds = keySize + 6;var ksRows = (nRounds + 1) * 4;var keySchedule = this._keySchedule = [];for (var ksRow = 0; ksRow < ksRows; ksRow++) {
        if (ksRow < keySize) {
          keySchedule[ksRow] = keyWords[ksRow];
        } else {
          var t = keySchedule[ksRow - 1];if (!(ksRow % keySize)) {
            t = t << 8 | t >>> 24;t = SBOX[t >>> 24] << 24 | SBOX[t >>> 16 & 255] << 16 | SBOX[t >>> 8 & 255] << 8 | SBOX[t & 255];t ^= RCON[ksRow / keySize | 0] << 24;
          } else {
            if (keySize > 6 && ksRow % keySize == 4) {
              t = SBOX[t >>> 24] << 24 | SBOX[t >>> 16 & 255] << 16 | SBOX[t >>> 8 & 255] << 8 | SBOX[t & 255];
            }
          }keySchedule[ksRow] = keySchedule[ksRow - keySize] ^ t;
        }
      }var invKeySchedule = this._invKeySchedule = [];for (var invKsRow = 0; invKsRow < ksRows; invKsRow++) {
        var ksRow = ksRows - invKsRow;if (invKsRow % 4) {
          var t = keySchedule[ksRow];
        } else {
          var t = keySchedule[ksRow - 4];
        }if (invKsRow < 4 || ksRow <= 4) {
          invKeySchedule[invKsRow] = t;
        } else {
          invKeySchedule[invKsRow] = INV_SUB_MIX_0[SBOX[t >>> 24]] ^ INV_SUB_MIX_1[SBOX[t >>> 16 & 255]] ^ INV_SUB_MIX_2[SBOX[t >>> 8 & 255]] ^ INV_SUB_MIX_3[SBOX[t & 255]];
        }
      }
    }, encryptBlock: function encryptBlock(M, offset) {
      this._doCryptBlock(M, offset, this._keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX);
    }, decryptBlock: function decryptBlock(M, offset) {
      var t = M[offset + 1];M[offset + 1] = M[offset + 3];M[offset + 3] = t;this._doCryptBlock(M, offset, this._invKeySchedule, INV_SUB_MIX_0, INV_SUB_MIX_1, INV_SUB_MIX_2, INV_SUB_MIX_3, INV_SBOX);var t = M[offset + 1];M[offset + 1] = M[offset + 3];M[offset + 3] = t;
    }, _doCryptBlock: function _doCryptBlock(M, offset, keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX) {
      var nRounds = this._nRounds;var s0 = M[offset] ^ keySchedule[0];var s1 = M[offset + 1] ^ keySchedule[1];var s2 = M[offset + 2] ^ keySchedule[2];var s3 = M[offset + 3] ^ keySchedule[3];var ksRow = 4;for (var round = 1; round < nRounds; round++) {
        var t0 = SUB_MIX_0[s0 >>> 24] ^ SUB_MIX_1[s1 >>> 16 & 255] ^ SUB_MIX_2[s2 >>> 8 & 255] ^ SUB_MIX_3[s3 & 255] ^ keySchedule[ksRow++];var t1 = SUB_MIX_0[s1 >>> 24] ^ SUB_MIX_1[s2 >>> 16 & 255] ^ SUB_MIX_2[s3 >>> 8 & 255] ^ SUB_MIX_3[s0 & 255] ^ keySchedule[ksRow++];var t2 = SUB_MIX_0[s2 >>> 24] ^ SUB_MIX_1[s3 >>> 16 & 255] ^ SUB_MIX_2[s0 >>> 8 & 255] ^ SUB_MIX_3[s1 & 255] ^ keySchedule[ksRow++];var t3 = SUB_MIX_0[s3 >>> 24] ^ SUB_MIX_1[s0 >>> 16 & 255] ^ SUB_MIX_2[s1 >>> 8 & 255] ^ SUB_MIX_3[s2 & 255] ^ keySchedule[ksRow++];s0 = t0;s1 = t1;s2 = t2;s3 = t3;
      }var t0 = (SBOX[s0 >>> 24] << 24 | SBOX[s1 >>> 16 & 255] << 16 | SBOX[s2 >>> 8 & 255] << 8 | SBOX[s3 & 255]) ^ keySchedule[ksRow++];var t1 = (SBOX[s1 >>> 24] << 24 | SBOX[s2 >>> 16 & 255] << 16 | SBOX[s3 >>> 8 & 255] << 8 | SBOX[s0 & 255]) ^ keySchedule[ksRow++];var t2 = (SBOX[s2 >>> 24] << 24 | SBOX[s3 >>> 16 & 255] << 16 | SBOX[s0 >>> 8 & 255] << 8 | SBOX[s1 & 255]) ^ keySchedule[ksRow++];var t3 = (SBOX[s3 >>> 24] << 24 | SBOX[s0 >>> 16 & 255] << 16 | SBOX[s1 >>> 8 & 255] << 8 | SBOX[s2 & 255]) ^ keySchedule[ksRow++];M[offset] = t0;M[offset + 1] = t1;M[offset + 2] = t2;M[offset + 3] = t3;
    }, keySize: 256 / 32 });C.AES = BlockCipher._createHelper(AES);
})();

cc._RFpop();
},{"../aes/cipher-core":"cipher-core","../aes/enc-base64":"enc-base64","../aes/evpkdf":"evpkdf","../aes/md5":"md5","../aes/mode-ecb":"mode-ecb","./core":"core"}],"cipher-core":[function(require,module,exports){
"use strict";
cc._RFpush(module, 'f7009oc2wJMlbzy3sUEYXQR', 'cipher-core');
// Script/network/aes/cipher-core.js

"use strict";

var CryptoJS = require("./core");CryptoJS.lib.Cipher || function (undefined) {
    var C = CryptoJS;var C_lib = C.lib;var Base = C_lib.Base;var WordArray = C_lib.WordArray;var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm;var C_enc = C.enc;var Utf8 = C_enc.Utf8;var Base64 = C_enc.Base64;var C_algo = C.algo;var EvpKDF = C_algo.EvpKDF;var Cipher = C_lib.Cipher = BufferedBlockAlgorithm.extend({ cfg: Base.extend(), createEncryptor: function createEncryptor(key, cfg) {
            return this.create(this._ENC_XFORM_MODE, key, cfg);
        }, createDecryptor: function createDecryptor(key, cfg) {
            return this.create(this._DEC_XFORM_MODE, key, cfg);
        }, init: function init(xformMode, key, cfg) {
            this.cfg = this.cfg.extend(cfg);this._xformMode = xformMode;this._key = key;this.reset();
        }, reset: function reset() {
            BufferedBlockAlgorithm.reset.call(this);this._doReset();
        }, process: function process(dataUpdate) {
            this._append(dataUpdate);return this._process();
        }, finalize: function finalize(dataUpdate) {
            if (dataUpdate) {
                this._append(dataUpdate);
            }var finalProcessedData = this._doFinalize();return finalProcessedData;
        }, keySize: 128 / 32, ivSize: 128 / 32, _ENC_XFORM_MODE: 1, _DEC_XFORM_MODE: 2, _createHelper: function () {
            function selectCipherStrategy(key) {
                if (typeof key == "string") {
                    return PasswordBasedCipher;
                } else {
                    return SerializableCipher;
                }
            }return function (cipher) {
                return { encrypt: function encrypt(message, key, cfg) {
                        return selectCipherStrategy(key).encrypt(cipher, message, key, cfg);
                    }, decrypt: function decrypt(ciphertext, key, cfg) {
                        return selectCipherStrategy(key).decrypt(cipher, ciphertext, key, cfg);
                    } };
            };
        }() });var StreamCipher = C_lib.StreamCipher = Cipher.extend({ _doFinalize: function _doFinalize() {
            var finalProcessedBlocks = this._process(!!"flush");return finalProcessedBlocks;
        }, blockSize: 1 });var C_mode = C.mode = {};var BlockCipherMode = C_lib.BlockCipherMode = Base.extend({ createEncryptor: function createEncryptor(cipher, iv) {
            return this.Encryptor.create(cipher, iv);
        }, createDecryptor: function createDecryptor(cipher, iv) {
            return this.Decryptor.create(cipher, iv);
        }, init: function init(cipher, iv) {
            this._cipher = cipher;this._iv = iv;
        } });var CBC = C_mode.CBC = function () {
        var CBC = BlockCipherMode.extend();CBC.Encryptor = CBC.extend({ processBlock: function processBlock(words, offset) {
                var cipher = this._cipher;var blockSize = cipher.blockSize;xorBlock.call(this, words, offset, blockSize);cipher.encryptBlock(words, offset);this._prevBlock = words.slice(offset, offset + blockSize);
            } });CBC.Decryptor = CBC.extend({ processBlock: function processBlock(words, offset) {
                var cipher = this._cipher;var blockSize = cipher.blockSize;var thisBlock = words.slice(offset, offset + blockSize);cipher.decryptBlock(words, offset);xorBlock.call(this, words, offset, blockSize);this._prevBlock = thisBlock;
            } });function xorBlock(words, offset, blockSize) {
            var iv = this._iv;if (iv) {
                var block = iv;this._iv = undefined;
            } else {
                var block = this._prevBlock;
            }for (var i = 0; i < blockSize; i++) {
                words[offset + i] ^= block[i];
            }
        }return CBC;
    }();var C_pad = C.pad = {};var Pkcs7 = C_pad.Pkcs7 = { pad: function pad(data, blockSize) {
            var blockSizeBytes = blockSize * 4;var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;var paddingWord = nPaddingBytes << 24 | nPaddingBytes << 16 | nPaddingBytes << 8 | nPaddingBytes;var paddingWords = [];for (var i = 0; i < nPaddingBytes; i += 4) {
                paddingWords.push(paddingWord);
            }var padding = WordArray.create(paddingWords, nPaddingBytes);data.concat(padding);
        }, unpad: function unpad(data) {
            var nPaddingBytes = data.words[data.sigBytes - 1 >>> 2] & 255;data.sigBytes -= nPaddingBytes;
        } };var BlockCipher = C_lib.BlockCipher = Cipher.extend({ cfg: Cipher.cfg.extend({ mode: CBC, padding: Pkcs7 }), reset: function reset() {
            Cipher.reset.call(this);var cfg = this.cfg;var iv = cfg.iv;var mode = cfg.mode;if (this._xformMode == this._ENC_XFORM_MODE) {
                var modeCreator = mode.createEncryptor;
            } else {
                var modeCreator = mode.createDecryptor;this._minBufferSize = 1;
            }this._mode = modeCreator.call(mode, this, iv && iv.words);
        }, _doProcessBlock: function _doProcessBlock(words, offset) {
            this._mode.processBlock(words, offset);
        }, _doFinalize: function _doFinalize() {
            var padding = this.cfg.padding;if (this._xformMode == this._ENC_XFORM_MODE) {
                padding.pad(this._data, this.blockSize);var finalProcessedBlocks = this._process(!!"flush");
            } else {
                var finalProcessedBlocks = this._process(!!"flush");padding.unpad(finalProcessedBlocks);
            }return finalProcessedBlocks;
        }, blockSize: 128 / 32 });var CipherParams = C_lib.CipherParams = Base.extend({ init: function init(cipherParams) {
            this.mixIn(cipherParams);
        }, toString: function toString(formatter) {
            return (formatter || this.formatter).stringify(this);
        } });var C_format = C.format = {};var OpenSSLFormatter = C_format.OpenSSL = { stringify: function stringify(cipherParams) {
            var ciphertext = cipherParams.ciphertext;var salt = cipherParams.salt;if (salt) {
                var wordArray = WordArray.create([1398893684, 1701076831]).concat(salt).concat(ciphertext);
            } else {
                var wordArray = ciphertext;
            }return wordArray.toString(Base64);
        }, parse: function parse(openSSLStr) {
            var ciphertext = Base64.parse(openSSLStr);var ciphertextWords = ciphertext.words;if (ciphertextWords[0] == 1398893684 && ciphertextWords[1] == 1701076831) {
                var salt = WordArray.create(ciphertextWords.slice(2, 4));ciphertextWords.splice(0, 4);ciphertext.sigBytes -= 16;
            }return CipherParams.create({ ciphertext: ciphertext, salt: salt });
        } };var SerializableCipher = C_lib.SerializableCipher = Base.extend({ cfg: Base.extend({ format: OpenSSLFormatter }), encrypt: function encrypt(cipher, message, key, cfg) {
            cfg = this.cfg.extend(cfg);
            var encryptor = cipher.createEncryptor(key, cfg);var ciphertext = encryptor.finalize(message);var cipherCfg = encryptor.cfg;return CipherParams.create({ ciphertext: ciphertext, key: key, iv: cipherCfg.iv, algorithm: cipher, mode: cipherCfg.mode, padding: cipherCfg.padding, blockSize: cipher.blockSize, formatter: cfg.format });
        }, decrypt: function decrypt(cipher, ciphertext, key, cfg) {
            cfg = this.cfg.extend(cfg);ciphertext = this._parse(ciphertext, cfg.format);var plaintext = cipher.createDecryptor(key, cfg).finalize(ciphertext.ciphertext);return plaintext;
        }, _parse: function _parse(ciphertext, format) {
            if (typeof ciphertext == "string") {
                return format.parse(ciphertext, this);
            } else {
                return ciphertext;
            }
        } });var C_kdf = C.kdf = {};var OpenSSLKdf = C_kdf.OpenSSL = { execute: function execute(password, keySize, ivSize, salt) {
            if (!salt) {
                salt = WordArray.random(64 / 8);
            }var key = EvpKDF.create({ keySize: keySize + ivSize }).compute(password, salt);var iv = WordArray.create(key.words.slice(keySize), ivSize * 4);key.sigBytes = keySize * 4;return CipherParams.create({ key: key, iv: iv, salt: salt });
        } };var PasswordBasedCipher = C_lib.PasswordBasedCipher = SerializableCipher.extend({ cfg: SerializableCipher.cfg.extend({ kdf: OpenSSLKdf }), encrypt: function encrypt(cipher, message, password, cfg) {
            cfg = this.cfg.extend(cfg);var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize);cfg.iv = derivedParams.iv;var ciphertext = SerializableCipher.encrypt.call(this, cipher, message, derivedParams.key, cfg);ciphertext.mixIn(derivedParams);return ciphertext;
        }, decrypt: function decrypt(cipher, ciphertext, password, cfg) {
            cfg = this.cfg.extend(cfg);ciphertext = this._parse(ciphertext, cfg.format);var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize, ciphertext.salt);cfg.iv = derivedParams.iv;var plaintext = SerializableCipher.decrypt.call(this, cipher, ciphertext, derivedParams.key, cfg);return plaintext;
        } });
}();

cc._RFpop();
},{"./core":"core"}],"convertNode":[function(require,module,exports){
"use strict";
cc._RFpush(module, '52d79u8vuROVY3yrhoo8aXz', 'convertNode');
// Script/convertNode.js

"use strict";

var NetData = require("NetData");

cc.Class({
    extends: cc.Component,

    properties: {

        flyChipNode: cc.Prefab,

        homePosition: {
            default: [],
            type: [cc.Vec2]
        },

        targetLocation1: {
            default: [],
            type: [cc.Vec2]
        },

        targetLocation2: {
            default: [],
            type: [cc.Vec2]
        },

        flyChipNodeArray: {
            default: [],
            type: [cc.Node]
        },

        //rewardFlyNode: cc.Prefab,

        rewardFlyNodeTargetLocation: {
            default: [],
            type: [cc.Vec2]
        },

        rewardFlyNodeHomePosition: cc.Vec2,
        rewardFlyNodeInistantArray: {
            default: [],
            type: cc.Node
        },

        markFlyRewardCnt: 0
    },

    // use this for initialization
    onLoad: function onLoad() {},

    chipFlyAction: function chipFlyAction(chipNum, chipIndex, betId, flag, powerTarget) {
        var netData = NetData.NetData.getInst();
        var homep = this.homePosition[chipIndex];

        var targetP = null;
        if (netData.timeFlag == 1) {
            targetP = this.targetLocation1[betId];
        } else {
            targetP = this.targetLocation2[betId];
        }

        var flyNode = this.getFlyChipNode();
        var flyNodeJS = flyNode.getComponent("flyChipNodePre");

        flyNodeJS.setSkinWithTag(chipIndex);
        flyNodeJS.setMoney(chipNum);
        flyNodeJS.chipFlyAction(homep, targetP, flag, flyNode, powerTarget, this, this.finishedCallback);
    },

    getFlyChipNode: function getFlyChipNode() {
        var flyNode = null;
        if (this.flyChipNodeArray.length > 0) {
            flyNode = this.flyChipNodeArray.shift();
            flyNode.active = true;
            return flyNode;
        }

        flyNode = cc.instantiate(this.flyChipNode);
        this.node.addChild(flyNode);
        flyNode.active = true;
        return flyNode;
    },

    setFlyChipNode: function setFlyChipNode(flynode) {
        this.flyChipNodeArray.push(flynode);
        flynode.active = false;
    },

    finishedCallback: function finishedCallback(target, object) {
        var powerTarget = object.powerTarget;
        var flag = object.flag;
        var self = object.target;
        var flynode = object.flyNode;

        self.setFlyChipNode(flynode);
        powerTarget.flyChipNodeFinished(powerTarget, flag);

        object = null;
    },

    //index: 0负 1胜  2平
    flyRewardNode: function flyRewardNode(index, positionIndex) {
        var flyNode = this.rewardFlyNodeInistantArray[positionIndex - 2];
        // if(this.rewardFlyNodeInistantArray.length)
        // {
        //     flyNode = this.rewardFlyNodeInistantArray.shift();
        // }
        // else
        // {
        //     flyNode = cc.instantiate(rewardFlyNode);
        //     this.node.addChild(flyNode);
        //     this.rewardFlyNodeInistantArray.push(flyNode);
        // }

        flyNode.active = true;
        var flyNodeJS = flyNode.getComponent("flyRewardNodePre");
        flyNodeJS.setSkin(index);
        var p1 = this.rewardFlyNodeHomePosition;
        var p2 = this.rewardFlyNodeTargetLocation[positionIndex - 2];
        flyNodeJS.flyRewardAction(p1, p2);
    },

    flyRewardActionFinished: function flyRewardActionFinished() {
        /*
        this.markFlyRewardCnt ++;
        if(this.markFlyRewardCnt == 4)
        {
            for(var i = 0; i < this.rewardFlyNodeInistantArray.length; i ++)
            {
                this.rewardFlyNodeInistantArray[i].active = false;
            }
        }
        */
        for (var i = 0; i < this.rewardFlyNodeInistantArray.length; i++) {
            this.rewardFlyNodeInistantArray[i].active = false;
        }
    }

    // called every frame, uncomment this function to activate update callback
    // update: function (dt) {

    // },
});

cc._RFpop();
},{"NetData":"NetData"}],"core":[function(require,module,exports){
"use strict";
cc._RFpush(module, '572fe/2x+JCKIyUCoP5avyE', 'core');
// Script/network/aes/core.js

"use strict";

var CryptoJS = CryptoJS || function (Math, undefined) {
    var C = {};var C_lib = C.lib = {};var Base = C_lib.Base = function () {
        function F() {}return { extend: function extend(overrides) {
                F.prototype = this;var subtype = new F();if (overrides) {
                    subtype.mixIn(overrides);
                }if (!subtype.hasOwnProperty("init")) {
                    subtype.init = function () {
                        subtype.$super.init.apply(this, arguments);
                    };
                }subtype.init.prototype = subtype;subtype.$super = this;return subtype;
            }, create: function create() {
                var instance = this.extend();instance.init.apply(instance, arguments);return instance;
            }, init: function init() {}, mixIn: function mixIn(properties) {
                for (var propertyName in properties) {
                    if (properties.hasOwnProperty(propertyName)) {
                        this[propertyName] = properties[propertyName];
                    }
                }if (properties.hasOwnProperty("toString")) {
                    this.toString = properties.toString;
                }
            }, clone: function clone() {
                return this.init.prototype.extend(this);
            } };
    }();var WordArray = C_lib.WordArray = Base.extend({ init: function init(words, sigBytes) {
            words = this.words = words || [];if (sigBytes != undefined) {
                this.sigBytes = sigBytes;
            } else {
                this.sigBytes = words.length * 4;
            }
        }, toString: function toString(encoder) {
            return (encoder || Hex).stringify(this);
        }, concat: function concat(wordArray) {
            var thisWords = this.words;var thatWords = wordArray.words;var thisSigBytes = this.sigBytes;var thatSigBytes = wordArray.sigBytes;this.clamp();if (thisSigBytes % 4) {
                for (var i = 0; i < thatSigBytes; i++) {
                    var thatByte = thatWords[i >>> 2] >>> 24 - i % 4 * 8 & 255;thisWords[thisSigBytes + i >>> 2] |= thatByte << 24 - (thisSigBytes + i) % 4 * 8;
                }
            } else {
                for (var i = 0; i < thatSigBytes; i += 4) {
                    thisWords[thisSigBytes + i >>> 2] = thatWords[i >>> 2];
                }
            }this.sigBytes += thatSigBytes;return this;
        }, clamp: function clamp() {
            var words = this.words;var sigBytes = this.sigBytes;words[sigBytes >>> 2] &= 4294967295 << 32 - sigBytes % 4 * 8;words.length = Math.ceil(sigBytes / 4);
        }, clone: function clone() {
            var clone = Base.clone.call(this);clone.words = this.words.slice(0);return clone;
        }, random: function random(nBytes) {
            var words = [];var r = function r(m_w) {
                var m_w = m_w;var m_z = 987654321;var mask = 4294967295;return function () {
                    m_z = 36969 * (m_z & 65535) + (m_z >> 16) & mask;m_w = 18000 * (m_w & 65535) + (m_w >> 16) & mask;var result = (m_z << 16) + m_w & mask;result /= 4294967296;result += 0.5;return result * (Math.random() > 0.5 ? 1 : -1);
                };
            };for (var i = 0, rcache; i < nBytes; i += 4) {
                var _r = r((rcache || Math.random()) * 4294967296);rcache = _r() * 987654071;words.push(_r() * 4294967296 | 0);
            }return new WordArray.init(words, nBytes);
        } });var C_enc = C.enc = {};var Hex = C_enc.Hex = { stringify: function stringify(wordArray) {
            var words = wordArray.words;var sigBytes = wordArray.sigBytes;var hexChars = [];for (var i = 0; i < sigBytes; i++) {
                var bite = words[i >>> 2] >>> 24 - i % 4 * 8 & 255;hexChars.push((bite >>> 4).toString(16));hexChars.push((bite & 15).toString(16));
            }return hexChars.join("");
        }, parse: function parse(hexStr) {
            var hexStrLength = hexStr.length;var words = [];for (var i = 0; i < hexStrLength; i += 2) {
                words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << 24 - i % 8 * 4;
            }return new WordArray.init(words, hexStrLength / 2);
        } };var Latin1 = C_enc.Latin1 = { stringify: function stringify(wordArray) {
            var words = wordArray.words;var sigBytes = wordArray.sigBytes;var latin1Chars = [];for (var i = 0; i < sigBytes; i++) {
                var bite = words[i >>> 2] >>> 24 - i % 4 * 8 & 255;latin1Chars.push(String.fromCharCode(bite));
            }return latin1Chars.join("");
        }, parse: function parse(latin1Str) {
            var latin1StrLength = latin1Str.length;var words = [];for (var i = 0; i < latin1StrLength; i++) {
                words[i >>> 2] |= (latin1Str.charCodeAt(i) & 255) << 24 - i % 4 * 8;
            }return new WordArray.init(words, latin1StrLength);
        } };var Utf8 = C_enc.Utf8 = { stringify: function stringify(wordArray) {
            try {
                return decodeURIComponent(escape(Latin1.stringify(wordArray)));
            } catch (e) {
                throw new Error("Malformed UTF-8 data");
            }
        }, parse: function parse(utf8Str) {
            return Latin1.parse(unescape(encodeURIComponent(utf8Str)));
        } };var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({ reset: function reset() {
            this._data = new WordArray.init();this._nDataBytes = 0;
        }, _append: function _append(data) {
            if (typeof data == "string") {
                data = Utf8.parse(data);
            }this._data.concat(data);this._nDataBytes += data.sigBytes;
        }, _process: function _process(doFlush) {
            var data = this._data;var dataWords = data.words;var dataSigBytes = data.sigBytes;var blockSize = this.blockSize;var blockSizeBytes = blockSize * 4;var nBlocksReady = dataSigBytes / blockSizeBytes;if (doFlush) {
                nBlocksReady = Math.ceil(nBlocksReady);
            } else {
                nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);
            }var nWordsReady = nBlocksReady * blockSize;var nBytesReady = Math.min(nWordsReady * 4, dataSigBytes);if (nWordsReady) {
                for (var offset = 0; offset < nWordsReady; offset += blockSize) {
                    this._doProcessBlock(dataWords, offset);
                }var processedWords = dataWords.splice(0, nWordsReady);data.sigBytes -= nBytesReady;
            }return new WordArray.init(processedWords, nBytesReady);
        }, clone: function clone() {
            var clone = Base.clone.call(this);clone._data = this._data.clone();return clone;
        }, _minBufferSize: 0 });var Hasher = C_lib.Hasher = BufferedBlockAlgorithm.extend({ cfg: Base.extend(), init: function init(cfg) {
            this.cfg = this.cfg.extend(cfg);this.reset();
        }, reset: function reset() {
            BufferedBlockAlgorithm.reset.call(this);this._doReset();
        }, update: function update(messageUpdate) {
            this._append(messageUpdate);this._process();return this;
        }, finalize: function finalize(messageUpdate) {
            if (messageUpdate) {
                this._append(messageUpdate);
            }var hash = this._doFinalize();
            return hash;
        }, blockSize: 512 / 32, _createHelper: function _createHelper(hasher) {
            return function (message, cfg) {
                return new hasher.init(cfg).finalize(message);
            };
        }, _createHmacHelper: function _createHmacHelper(hasher) {
            return function (message, key) {
                return new C_algo.HMAC.init(hasher, key).finalize(message);
            };
        } });var C_algo = C.algo = {};return C;
}(Math);module.exports = CryptoJS;

cc._RFpop();
},{}],"enc-base64":[function(require,module,exports){
"use strict";
cc._RFpush(module, '0f5e3DWxj5ADaF0mRNcqcyU', 'enc-base64');
// Script/network/aes/enc-base64.js

"use strict";

var CryptoJS = require("./core");(function () {
  var C = CryptoJS;var C_lib = C.lib;var WordArray = C_lib.WordArray;var C_enc = C.enc;var Base64 = C_enc.Base64 = { stringify: function stringify(wordArray) {
      var words = wordArray.words;var sigBytes = wordArray.sigBytes;var map = this._map;wordArray.clamp();var base64Chars = [];for (var i = 0; i < sigBytes; i += 3) {
        var byte1 = words[i >>> 2] >>> 24 - i % 4 * 8 & 255;var byte2 = words[i + 1 >>> 2] >>> 24 - (i + 1) % 4 * 8 & 255;var byte3 = words[i + 2 >>> 2] >>> 24 - (i + 2) % 4 * 8 & 255;var triplet = byte1 << 16 | byte2 << 8 | byte3;for (var j = 0; j < 4 && i + j * 0.75 < sigBytes; j++) {
          base64Chars.push(map.charAt(triplet >>> 6 * (3 - j) & 63));
        }
      }var paddingChar = map.charAt(64);if (paddingChar) {
        while (base64Chars.length % 4) {
          base64Chars.push(paddingChar);
        }
      }return base64Chars.join("");
    }, parse: function parse(base64Str) {
      var base64StrLength = base64Str.length;var map = this._map;var paddingChar = map.charAt(64);if (paddingChar) {
        var paddingIndex = base64Str.indexOf(paddingChar);if (paddingIndex != -1) {
          base64StrLength = paddingIndex;
        }
      }var words = [];var nBytes = 0;for (var i = 0; i < base64StrLength; i++) {
        if (i % 4) {
          var bits1 = map.indexOf(base64Str.charAt(i - 1)) << i % 4 * 2;var bits2 = map.indexOf(base64Str.charAt(i)) >>> 6 - i % 4 * 2;var bitsCombined = bits1 | bits2;words[nBytes >>> 2] |= bitsCombined << 24 - nBytes % 4 * 8;nBytes++;
        }
      }return WordArray.create(words, nBytes);
    }, _map: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=" };
})();

cc._RFpop();
},{"./core":"core"}],"errorDialog":[function(require,module,exports){
"use strict";
cc._RFpush(module, '6a5cchPFopKmrHUbPd5bRLY', 'errorDialog');
// Script/Tools/errorDialog.js

'use strict';

var EbuttonTag = cc.Enum({

    eSkinFresh: 0,
    eSkinOK: 1,
    eSkinCannel: 2,
    eSkin3: 3,
    eSkin4: 4,
    eSkin5: 5,
    eSkin6: 6

});
cc.Class({
    extends: cc.Component,

    properties: {
        leftButton: cc.Node,
        rightButton: cc.Node,
        title: cc.Label,
        leftSkinArray: {
            default: [],
            type: [cc.Node]
        },
        leftTitle: cc.Label,
        rightSkinArray: {
            default: [],
            type: [cc.Node]
        },
        rightTitle: cc.Label,
        typeAction: 0

    },

    // use this for initialization
    onLoad: function onLoad() {
        this.leftButton.on(cc.Node.EventType.TOUCH_START, function (event) {
            this.leftButton.scale = 0.8;
        }, this);

        this.leftButton.on(cc.Node.EventType.TOUCH_END, function (event) {
            this.leftButton.scale = 1;
            var gameFun = cc.find('Canvas').getComponent('game');
            gameFun.errorDialogCallback(this.typeAction, 1);
        }, this);

        this.leftButton.on(cc.Node.EventType.TOUCH_CANCEL, function (event) {
            this.leftButton.scale = 1;
        }, this);

        this.rightButton.on(cc.Node.EventType.TOUCH_START, function (event) {
            this.rightButton.scale = 0.8;
        }, this);

        this.rightButton.on(cc.Node.EventType.TOUCH_END, function (event) {
            this.rightButton.scale = 1;
            var onFunction = cc.find('Canvas').getComponent('game');
            onFunction.errorDialogCallback(this.typeAction, 2);
        }, this);

        this.rightButton.on(cc.Node.EventType.TOUCH_CANCEL, function (event) {
            this.rightButton.scale = 1;
        }, this);
    },

    showDialog: function showDialog(title, buttonType) {
        this.typeAction = buttonType;
        this.node.active = true;
        this.resetzIndexZreo();
        this.title.string = title;

        if (buttonType === 0) //刷新
            {
                this.leftButton.x = 0;
                this.leftButton.y = 0;
                this.rightButton.active = false;
                this.leftSkinArray[0].zIndex = 20;
                this.leftIndex = 0;
                this.rightIndex = -1;
            } else if (buttonType == 1) //等等再走 不玩了
            {
                this.leftButton.x = -160;
                this.leftButton.y = -100;
                this.rightButton.active = true;
                this.leftSkinArray[1].zIndex = 20;
                this.rightSkinArray[1].zIndex = 20;
            } else if (buttonType == 2) //
            {
                this.leftButton.x = -160;
                this.leftButton.y = -100;
                this.rightButton.active = true;
                this.leftSkinArray[2].zIndex = 20;
                this.rightSkinArray[2].zIndex = 20;
            }
    },

    hideDialog: function hideDialog() {
        this.node.active = false;
    },

    resetzIndexZreo: function resetzIndexZreo() {
        for (var i = 0; i < this.leftSkinArray.length; i++) {
            this.leftSkinArray[i].zIndex = 0;
        }

        for (var j = 0; j < this.rightSkinArray.length; j++) {
            this.rightSkinArray[j].zIndex = 0;
        }
    }

});

cc._RFpop();
},{}],"evpkdf":[function(require,module,exports){
"use strict";
cc._RFpush(module, 'aa885BKH39D3pF0VusgBsiO', 'evpkdf');
// Script/network/aes/evpkdf.js

"use strict";

var CryptoJS = require("./core");(function () {
  var C = CryptoJS;var C_lib = C.lib;var Base = C_lib.Base;var WordArray = C_lib.WordArray;var C_algo = C.algo;var MD5 = C_algo.MD5;var EvpKDF = C_algo.EvpKDF = Base.extend({ cfg: Base.extend({ keySize: 128 / 32, hasher: MD5, iterations: 1 }), init: function init(cfg) {
      this.cfg = this.cfg.extend(cfg);
    }, compute: function compute(password, salt) {
      var cfg = this.cfg;var hasher = cfg.hasher.create();var derivedKey = WordArray.create();var derivedKeyWords = derivedKey.words;var keySize = cfg.keySize;var iterations = cfg.iterations;while (derivedKeyWords.length < keySize) {
        if (block) {
          hasher.update(block);
        }var block = hasher.update(password).finalize(salt);hasher.reset();for (var i = 1; i < iterations; i++) {
          block = hasher.finalize(block);hasher.reset();
        }derivedKey.concat(block);
      }derivedKey.sigBytes = keySize * 4;return derivedKey;
    } });C.EvpKDF = function (password, salt, cfg) {
    return EvpKDF.create(cfg).compute(password, salt);
  };
})();

cc._RFpop();
},{"./core":"core"}],"flyChipNodePre":[function(require,module,exports){
"use strict";
cc._RFpush(module, 'a48faS/teNMq5rWcxyKMFdi', 'flyChipNodePre');
// Script/flyChipNodePre.js

"use strict";

var ESkinTag = cc.Enum({

    eChip20: 0,
    eChip50: 1,
    eChip100: 2,
    eChip500: 3,
    eChip1000: 4,
    eGaryChip: 5,
    eOtherChip: 6

});

cc.Class({
    extends: cc.Component,

    properties: {
        //20 50 100 500 1000 gray other
        chipSkinNodeArray: {
            default: [],
            type: [cc.Node]
        },
        moneyLabel: cc.Node
    },

    // use this for initialization
    onLoad: function onLoad() {},

    /**
     * 设置筹码皮肤
     * @param tag 对应的筹码编号(20 50 100 500 1000 gray other) eg: 0 1 2 3 4 5 6
     */
    setSkinWithTag: function setSkinWithTag(tag) {

        for (var i = 0; i < this.chipSkinNodeArray.length; i++) {
            if (tag == i) {
                this.chipSkinNodeArray[i].activate = true;
            } else {
                this.chipSkinNodeArray[i].activate = false;
            }
        }
    },

    /**
     * 设置投注金额
     * @param chipMoney 对应的金额
     */
    setMoney: function setMoney(chipMoney) {
        if (chipMoney > 0) {
            this.moneyLabel.getComponent(cc.Label).string = chipMoney;
        } else {
            this.moneyLabel.getComponent(cc.Label).string = "";
        }
    },

    /**
     * 动画飞
     * @param position1 源位置
     * @param position2 目标位置
     * @param flag  飞回来还是飞回去
     * @param flyNode 飞过程的筹码对象
     * @param self 飞到的目标对象
     * @param callFun 回调的指针
     */
    chipFlyAction: function chipFlyAction(position1, position2, flag, flyNode, powerTarget, self, callFun) {
        var moveto = void 0;
        var dt = 0.2;
        this.node.stopAllActions();
        if (flag) {
            this.node.setPosition(position1);
            moveto = cc.moveTo(dt, position2);
        } else {
            this.node.setPosition(position2);
            moveto = cc.moveTo(dt, position1);
        }

        var ac1 = cc.scaleTo(dt, 1.0, 1.0);

        var obj = new Object();
        obj.powerTarget = powerTarget;
        obj.flyNode = flyNode;
        obj.target = self;
        obj.flag = flag;

        this.node.runAction(cc.sequence(moveto, cc.callFunc(callFun, self, obj)));
    }

});

module.exports = {
    ESkinTag: ESkinTag
};

cc._RFpop();
},{}],"flyRewardNodePre":[function(require,module,exports){
"use strict";
cc._RFpush(module, 'edcb84oyLtPR4yixmZKo0vu', 'flyRewardNodePre');
// Script/flyRewardNodePre.js

"use strict";

cc.Class({
    extends: cc.Component,

    properties: {

        rewardFlyNodeSkinArray: {
            default: [],
            type: [cc.Node]
        }
    },

    // use this for initialization
    onLoad: function onLoad() {},

    setSkin: function setSkin(index) {
        for (var i = 0; i < this.rewardFlyNodeSkinArray.length; i++) {
            if (index == i) {
                this.rewardFlyNodeSkinArray[i].active = true;
            } else {
                this.rewardFlyNodeSkinArray[i].active = false;
            }
        }
    },

    flyRewardAction: function flyRewardAction(position1, position2) {
        /*
        let moveto;
        let dt = 0.2;
        this.node.stopAllActions();
        this.node.setPosition(position1);
        moveto = cc.moveTo(dt,position2);
        //let ac1 = cc.scaleTo(dt, 1.0, 1.0);
            
        //var obj = new Object();
        //obj.target = self;
             
        this.node.runAction(cc.sequence(moveto));
        */
        this.node.stopAllActions();
        this.node.setPosition(position1);
        this.node.runAction(cc.moveTo(0.2, position2));
    }
});

cc._RFpop();
},{}],"game":[function(require,module,exports){
"use strict";
cc._RFpush(module, '96ad77uxvBOBKqKlCOn0FKD', 'game');
// Script/game.js

"use strict";

var NetData = require("NetData");
var DataOper = require("DataOper");
var ButtonScale = require("ButtonScale");
var Init = require("Init");
var init = new Init();
init.init();

cc.Class({
    extends: cc.Component,

    properties: {
        rewardNode: cc.Node,

        blackLayer: {
            default: null,
            type: cc.Node
        },

        waitLayer: {
            default: null,
            type: cc.Node
        },

        cdtimeIcon: cc.Node,
        //倒计时看区域
        cdBgYellow: {
            default: null,
            type: cc.Node
        },
        cdBgRed: {
            default: null,
            type: cc.Node
        },
        cdLabel: {
            default: null,
            type: cc.Label
        },
        cdJieduanLabel: {
            default: null,
            type: cc.Label
        },

        //筹码区
        chipNodeArray: {
            default: [],
            type: [cc.Node]
        },

        //清除
        clearOnNode: {
            default: null,
            type: cc.Node
        },
        clearOffNode: {
            default: null,
            type: cc.Node
        },

        //toast
        toastNode: {
            default: null,
            type: cc.Node
        },

        chooseAreaNodeArray: {
            default: [],
            type: [cc.Node]
        },

        chipAreaNoTouchNode: {
            default: null,
            type: cc.Node
        },

        betAreaNoTouchNode: {
            default: null,
            type: cc.Node
        },

        stageStopDialog: cc.Node, //第一回合结束提示框label
        sumLimit: 0, //判断投注和值； 是否超过limit;
        needClearFlag: false, //需要清理;要在投注成功后调;
        chipIndex: 0, //筹码node 的 index
        clearingFlag: false, //清理中

        canBetFlag: true, //当前是否可以投注
        cunCmd: 100, //默认100

        errorDialog: cc.Node

    },

    // use this for initialization
    onLoad: function onLoad() {

        this.netData = NetData.NetData.getInst();

        if (this.netData.initFlag == 1) {
            cc.log("正常初始化进入UI");
            //直接初始化
            this.frontInit();
            this.gameStart();
        } else if (this.netData.initFlag == 2) {
            // this.midNode.active = false;
            // this.stopHint(this, this.netData.stopSellingDesc);
        } else {
            cc.log("fei正常初始化进入UI");
            this.schedule(this.initWait, 0.1);
        }

        // //测试
        // this.netData.timeFlag = 1;
        // this.netData.secs = 25;

        // var obj = new Object();
        // obj.status = 1;
        // obj.betList = [10, 20, 30, 40, 50];
        // var oddsListObj = new Object();
        // oddsListObj.option = "群雄";
        // oddsListObj.id = 1;
        // oddsListObj.powerId = 2;
        // oddsListObj.odds1 = 0.2;
        // oddsListObj.odds2 = 0.8;
        // oddsListObj.status = 1;
        // obj.oddsList = oddsListObj;
        // this.netData.initData = obj;
        // this.gameStart();
    },

    initWait: function initWait(dt) {
        if (this.netData.initFlag == 1) {
            //直接初始化
            this.frontInit();
            this.gameStart();
            this.unschedule(this.initWait);
        } else if (this.netData.initFlag == 2) {
            // this.midNode.active = false;
            // this.stopHint(this, this.netData.stopSellingDesc);
        }
    },

    frontInit: function frontInit() {
        // if(this.netData.initData.status == 1){
        var te = new Date();
        var localTime = te.getTime();
        var offset = Math.round((localTime - init.timeStamp) / 1000);
        this.netData.secs -= offset;
        console.log("offset= " + offset + "sec= " + this.netData.secs);

        if (this.netData.secs < 0) {
            this.netData.initData.status = 3;
        }
        // }
    },

    resumeTick: function resumeTick(dt) {
        this.resumFlag = true;
    },

    start: function start() {
        if (cc._renderType === cc.game.RENDER_TYPE_CANVAS) {
            cc.renderer.enableDirtyRegion(false);
        }
    },

    isCanBet: function isCanBet(callback) {
        var flag = false;

        if (!CC_JSB) {
            var self = this;
            var sdk = window.aliLotteryCasinoSDK;
            if (sdk) {

                sdk.isLogin(function (isLogin) {

                    if (!isLogin) //没登录去登录
                        {
                            self.goLogin();
                        } else //登录了 判断是否获取豆成功
                        {

                            sdk.setCache('chip', self.netData.betList[self.chipIndex]);

                            //在判断是否足额（淘宝相关）
                            var price = self.netdata.betList[self.chipIndex];

                            flag = self.judgeBalance(price);
                            if (flag) {
                                callback();
                            }
                        }
                });
            } else {
                callback();
            }
        } else {
            callback();
        }
    },

    goLogin: function goLogin() {
        if (!CC_JSB) {
            var self = this;
            var sdk = window.aliLotteryCasinoSDK;

            if (sdk) {
                sdk.login(function () {
                    //需要调初始化;
                    // login 后执行
                    sdk.updateUserInfo();
                    /*sdk.getUserInfo(function(info) {
                        if (info) {
                            self.netData.sdkBalance = info.fee;
                            var uid = info.uid;
                            var nick = info.nick;
                            self.showUserIcon(uid, nick);
                        }
                    });*/
                    self.fresh();
                });
            } else {
                this.fresh();
            }
        } else {
            this.fresh();
        }
    },

    exitJudge: function exitJudge() {
        /*
        let fg = false;
        let unfinish = false;
         if(!this.canBetFlag || unfinish){
            this.errDialogTag = 3;
             if(this.clearingFlag){
                this.showErrorLayer("正在帮你撤单，请稍等", true);
            }
            else{
                this.showErrorLayer("正在帮你下单，请稍等", true);
            }
             fg = true;                        
        }
         return fg;
        */
    },

    fresh: function fresh() {
        this.setStageText();
    },

    exitGame: function exitGame() {
        if (!CC_JSB) {
            if (window.aliLotteryCasinoSDK) {
                window.aliLotteryCasinoSDK.popWindow();
            }
        } else {
            cc.director.loadScene('game');
        }
    },

    gameStart: function gameStart() {
        cc.log("gamestart");
        this.setStageText();
        this.getChipIndex();
        this.showChipNum();
        this.swiftSec();
        this.showPowerInfo();
        this.resumeBetChip();
        this.getTable();
    },

    /**
     * 获取同桌人
     */
    getTable: function getTable() {
        var dataOper = DataOper.DataOper.getInst();
        dataOper.getTable(this.netCallback, this);
    },

    reGo: function reGo() {},
    //初始化恢复数据
    resumeBetChip: function resumeBetChip() {
        var netData = NetData.NetData.getInst();
        if (netData.initData.bets) {
            for (var i = 0; i < netData.initData.bets.length; ++i) {
                for (var j = 0; j < this.chooseAreaNodeArray.length; j++) {
                    var chooseArea = this.chooseAreaNodeArray[j];
                    var powerJS = chooseArea.getComponent("Power");
                    if (powerJS.betId == netData.initData.bets[i].id) {

                        powerJS.initSelfChip(netData.initData.bets[i].timeFlag, netData.initData.bets[i].totalBet);
                    }
                }
            }
        }
    },

    showPowerInfo: function showPowerInfo() {
        for (var i = 0; i < this.chooseAreaNodeArray.length; i++) {
            var chooseArea = this.chooseAreaNodeArray[i];
            var powerJS = chooseArea.getComponent("Power");
            powerJS.updataInfo(this.cunCmd);
            powerJS.updataUI();
        }
    },

    setSelfChipSkinGray: function setSelfChipSkinGray(tag) {
        for (var i = 0; i < this.chooseAreaNodeArray.length; i++) {
            var chooseArea = this.chooseAreaNodeArray[i];
            var powerJS = chooseArea.getComponent("Power");
            powerJS.setSkinWithTag(tag);
        }
    },

    setStageText: function setStageText() {
        this.cdJieduanLabel.node.active = true;
        this.cdtimeIcon.active = true;
        this.cdLabel.node.x = -54;

        var jieduan = this.cdJieduanLabel.getComponent(cc.Label);
        if (this.netData.timeFlag == 1) //盲选阶段
            {
                jieduan.string = "盲选";
            } else if (this.netData.timeFlag == 2) //明选阶段
            {
                jieduan.string = "明选";
            }
    },

    swiftSec: function swiftSec() {
        //1：暗牌正在投注，2：暗牌阶段已截止，3：明牌正在投注，4:明牌截至投注，5：正在开奖，7:停售
        cc.log("this.netData.initData.status ", this.netData.initData.status);
        cc.log("time is ", this.netData.secs);
        switch (this.netData.initData.status) {
            case 1:
            case 3:
                {

                    if (this.netData.secs >= 0) {
                        this.cdLabel.string = this.netData.secs + "″";
                    } else {
                        this.cdLabel.string = "0″";
                    }

                    var pt = this.cdBgRed.parent;
                    pt.stopAllActions();
                    pt.runAction(cc.show());

                    if (this.netData.secs <= 3) {

                        this.cdBgRed.active = true;
                        this.cdBgYellow.active = false;
                        var dt = 0.38; //3 / 8;
                        pt.runAction(cc.repeat(cc.sequence(cc.delayTime(dt), cc.hide(), cc.delayTime(dt), cc.show()), 4));
                    } else {
                        this.cdBgYellow.active = true;
                        this.cdBgRed.active = false;
                    }

                    this.schedule(this.showSec, 1);
                    this.grayLight(false);
                    this.setChipGray(false);
                }
                break;
            case 2:
            case 4:
                {
                    this.doStopBet();
                }
                break;
            case 5:
                {
                    //正在开奖
                    this.getReward();
                    this.grayLight(true);
                    this.setChipGray(true);
                }
                break;
            case 7:
                {
                    //停售

                }
                break;
            default:
                break;
        }
    },

    secCd: function secCd(dt) {
        this.netData.secs--;
    },

    showSec: function showSec(dt) {
        // cc.log("showSec：this.netData.secs ",this.netData.secs);

        this.netData.secs--;

        //获取同桌人，5s的倍数时获取
        if (this.netData.secs >= 5 && this.netData.secs % 5 == 0) {
            this.getTable();
        }

        if (this.netData.secs >= 0) {
            this.cdLabel.string = this.netData.secs + "″";
        } else {
            this.cdLabel.string = "0″";
        }

        if (this.netData.secs <= 3) {
            var pt = this.cdBgRed.parent;
            cc.log("sec<3");
            this.cdBgRed.active = true;
            this.cdBgYellow.active = false;
            var _dt = 0.38; //3 / 8;
            pt.runAction(cc.repeat(cc.sequence(cc.delayTime(_dt), cc.hide(), cc.delayTime(_dt), cc.show()), 4));
        }

        if (this.netData.secs <= 0) {
            this.setSelfChipSkinGray(5);
            cc.log("sec== 0");
            this.doStopBet();
        }
    },

    doStopBet: function doStopBet() {
        cc.log("this.netData.timeFlag", this.netData.timeFlag);
        //this.canBetFlag = false;
        // this.unschedule(this.turnTableLogic);
        this.cdBgRed.parent.stopAllActions();
        this.cdBgRed.parent.runAction(cc.show());
        this.cdBgYellow.active = true;
        this.cdBgRed.active = false;
        this.cdLabel.node.x = -54;
        // this.cdLabel.w = 220;
        this.cdLabel.string = "已截止";
        this.unschedule(this.showSec);
        //变灰;
        this.grayLight(true);
        this.setChipGray(true);
        //筹码便会的变灰

        if (this.netData.timeFlag == 1) //提示框的弹出获取结果开奖就然后获取第二回合数据
            {
                this.stageStopDialog.active = true;

                var self = this;
                var callback = function callback(dt) {
                    this.getSecondData(); //获取第二阶段
                };
                this.scheduleOnce(callback, 3 + this.netData.initData.deadSecs1); //一阶段停止时间+3s
            } else //获取开奖结果
            {
                var callback = function callback(dt) {
                    this.getReward();
                };
                this.scheduleOnce(callback, 3 + this.netData.initData.deadSecs2); //二阶段停止时间+3s
            }
    },

    grayLight: function grayLight(flag) {
        this.clearOnNode.parent.active = !flag;
        this.clearOffNode.parent.active = flag;
        this.betAreaNoTouchNode.active = flag;
    },

    getReward: function getReward() {
        this.cdBgRed.parent.stopAllActions();
        this.cdBgRed.parent.runAction(cc.show());
        this.cdBgYellow.active = true;
        this.cdBgRed.active = false;
        this.cdJieduanLabel.node.active = false;
        this.cdtimeIcon.active = false;
        this.cdLabel.node.x = -100;
        this.cdLabel.string = "正在开奖";
        this.scheduleOnce(this.doReward, 2); //给服务器预留的2秒;
    },

    getSecondData: function getSecondData() //获取第二阶段的数据
    {
        //this.showWaitLayer();
        var dataOper = DataOper.DataOper.getInst();
        dataOper.getSecondData(this.netCallback, this);
    },

    doReward: function doReward(dt) {
        //this.showWaitLayer();
        var dataOper = DataOper.DataOper.getInst();
        dataOper.getReward(this.netCallback, this);
    },

    showWaitLayer: function showWaitLayer() {
        this.blackLayer.active = true;
        this.waitLayer.active = true;
    },

    hideWaitLayer: function hideWaitLayer() {
        this.blackLayer.active = false;
        this.waitLayer.active = false;
    },

    judgeBalance: function judgeBalance(amount) {
        var fg = true;

        if (this.sdkBalance == -1) {
            // this.errDialogTag = 5;
            // this.blackLayer.active = true;
            // this.refreshNode.getChildByName("word").getComponent(cc.Label).string = "获取" + this.netData.currency + "失败，请刷新页面";
            // this.refreshNode.runAction(cc.scaleTo(0.2, 1.0, 1.0));
            fg = false;
        } else {

            if (amount > this.sdkBalance) {
                //提示余额不足，跳转到充值
                if (!CC_JSB) {
                    if (window.aliLotteryCasinoSDK) {
                        window.aliLotteryCasinoSDK.recharge(true);
                    }
                }

                fg = false;
                console.log("no balance");
            }
        }

        return fg;
    },

    getChipIndex: function getChipIndex() {
        var sdk = window.aliLotteryCasinoSDK;

        if (sdk) {
            var self = this;
            var len = this.netData.betList.length;

            window.aliLotteryCasinoSDK.getCache('chip', function (result) {
                if (result) {
                    for (var i = 0; i < len; i++) {
                        if (self.netData.betList[i] == result) {
                            self.chipIndex = i;
                            break;
                        }
                    }
                } else {
                    for (var _i = 0; _i < len; _i++) {
                        if (self.netData.betList[_i] == self.netData.preBet) {
                            self.chipIndex = _i;
                            break;
                        }
                    }
                }
            });
        }
    },

    /******************netCallback********************/
    netCallback: function netCallback(cmd, res, msg, self) {
        cc.log("netCallback cmd=" + cmd);
        self.cunCmd = cmd;
        var netData = NetData.NetData.getInst();
        self.hideWaitLayer();
        res = parseInt(res);
        console.log("res=" + res + "/mg=" + msg + "/cmd=" + self.cunCmd);
        switch (res) {
            case 0:
                {
                    switch (cmd) {
                        case 100:
                            //init
                            {
                                self.gameStart();
                            }
                            break;
                        case 101:
                            //bet
                            {
                                self.clearWithFlag(true);
                                self.canBetFlag = true;
                                self.showPowerInfo();
                                //投注成功后清零
                                for (var i = 0; i < self.chooseAreaNodeArray.length; i++) {
                                    var chooseArea = self.chooseAreaNodeArray[i];
                                    var powerJS = chooseArea.getComponent("Power");
                                    if (powerJS.betFlag) {
                                        powerJS.betNum = 0;
                                    }
                                }
                            }
                            break;
                        case 102:
                            //clear
                            {
                                self.clearingFlag = false;
                                self.showPowerInfo();
                            }
                            break;
                        case 103:
                            //reward
                            {
                                self.clearWithFlag(false);
                                self.showPowerInfo();

                                self.schedule(self.secCd, 1);
                                self.scheduleOnce(self.nextPeriod, 10.0);
                            }
                            break;
                        case 104:
                            //twostemp
                            {
                                self.stageStopDialog.active = false;
                                self.schedule(self.showSec, 1);
                                self.grayLight(false);
                                self.setChipGray(false);
                                self.clearWithFlag(false);
                                self.setStageText();
                                self.showPowerInfo();
                            }
                            break;
                        case 105:
                            //同桌人
                            {
                                self.updataTable();
                            }
                            break;
                        case 106:
                            //订单列表
                            {}
                            break;
                        case 107:
                            //历史走势
                            {}
                    }
                }
                break;
            case 100019:
                //筹码飞筹码飞回
                {
                    for (var i = 0; i < self.chooseAreaNodeArray.length; i++) {
                        var chooseArea = self.chooseAreaNodeArray[i];
                        var powerJS = chooseArea.getComponent("Power");
                        for (var j = 0; j < netData.reqBetList.length; j++) {
                            if (powerJS.betId == netData.reqBetList[j].id) {
                                powerJS.reduceSelfChip();
                                break;
                            }
                        }
                    }
                }
                break;
            case 100028:
                //明牌阶段未开始，那就1s后再调下
                {
                    if (cmd == 104) {
                        setTimeout(function () {
                            //self.showWaitLayer();
                            var dataOper = DataOper.DataOper.getInst();
                            dataOper.getSecondData(self.netCallback, self);
                        }, 1000);
                    }
                }
                break;
            case 100011:
                //结算尚未开始，那就1s后再调下
                {
                    if (cmd == 103) {
                        setTimeout(function () {
                            //self.showWaitLayer();
                            var dataOper = DataOper.DataOper.getInst();
                            dataOper.getReward(self.netCallback, self);
                        }, 1000);
                    }
                }
                break;
            default:
                {
                    cc.log("res default!");
                    switch (cmd) {
                        case 101:
                            //投注失败回收筹码
                            {
                                // self.showToast(msg);
                                if (res == 200009) {//余额不足，跳转到充值

                                }

                                self.canBetFlag = true;
                                for (var i = 0; i < self.chooseAreaNodeArray.length; i++) {
                                    var chooseArea = self.chooseAreaNodeArray[i];
                                    var powerJS = chooseArea.getComponent("Power");
                                    for (var j = 0; j < netData.reqBetList.length; j++) {
                                        if (powerJS.betId == netData.reqBetList[j].id) {
                                            powerJS.reduceSelfChip();
                                            break;
                                        }
                                    }
                                }
                            }
                            break;
                        case 102:
                            {
                                //清空投注
                                self.clearWithFlag(false);
                                self.clearingFlag = false;
                                self.showToast(msg);
                            }
                            break;
                        default:
                            {
                                /*
                                self.stageStopDialog.active  = false;
                                //通常的错误提示
                                var errorDialogJs = self.errorDialog.getComponent("errorDialog");
                                errorDialogJs.showDialog(msg, 0);
                                */
                                self.showToast(msg);
                            }
                            break;
                    }
                }
                break;
        }
    },
    /******************netCallback********************/

    /**
     * 检查同桌人，每局结束时检查，把没有投注的清掉，把有投注的subId清掉
     */
    checkTable: function checkTable() {
        var netData = NetData.NetData.getInst();
        for (var i = 0; i < netData.reqTableArray.length; ++i) {
            if (netData.reqTableArray[i].subIds.length == 0) {
                netData.reqTableArray.splice(i, 1);
                --i;
            }
        }
    },

    /**
     * 更新同桌人，每次请求回来后调用，包含新的投注信息
     */
    updataTable: function updataTable() {
        var netData = NetData.NetData.getInst();
        for (var i = 0; i < netData.tableArray.length; ++i) {
            var flag = false;
            for (var j = 0; j < netData.reqTableArray.length; ++j) {
                if (netData.reqTableArray[j].uid == netData.tableArray[i].uid) {
                    flag = true;
                    for (var k = 0; k < netData.tableArray[i].subIds.length; ++k) {
                        netData.reqTableArray[j].subIds.push(netData.tableArray[i].subIds[k]);
                    }
                    break;
                }
            }

            if (!flag) {
                netData.reqTableArray.push(netData.tableArray[i]);
            }
        }
    },

    //结算飞戳结束
    rewardFlyFinishedCallback: function rewardFlyFinishedCallback() {
        //提示再来一局103
        cc.log("该提示结算页面了");
        this.betAreaNoTouchNode.active = false;
        var netData = NetData.NetData.getInst();
        var status = netData.rewardData.status;
        this.rewardNode.active = true;
        var num = 0;
        if (status == 1) //sheng
            {
                num = netData.rewardData.amount;
            } else if (status == 2) //fu
            {
                num = netData.rewardData.allNum;
            } else if (status == 3) //ping
            {
                num = netData.rewardData.amount;
            }

        this.rewardNode.getComponent("rewardNode").setContent(status, num);
    },

    nextPeriod: function nextPeriod(dt) {
        this.unschedule(this.nextPeriod);
        this.unschedule(this.secCd);
        this.netData.timeFlag = 1;

        this.rewardNode.active = false;

        for (var i = 0; i < this.chooseAreaNodeArray.length; i++) {
            var chooseArea = this.chooseAreaNodeArray[i];
            var powerJS = chooseArea.getComponent("Power");
            powerJS.resetInfo();
            powerJS.updataUI();
        }
        this.schedule(this.showSec, 1);
        this.grayLight(false);
        this.setChipGray(false);
        this.setStageText();
        this.cdLabel.string = this.netData.secs + "″";

        var convertNode = cc.find("Canvas/convertNode");
        var convertNodeJS = convertNode.getComponent("convertNode");
        convertNodeJS.flyRewardActionFinished();

        //同桌人
        this.checkTable();
    },

    clearWithFlag: function clearWithFlag(flag) {
        this.clearOnNode.parent.active = flag;
        this.clearOffNode.parent.active = !flag;
    },

    //所有按钮的回调等等事件
    btnActionCallBack: function btnActionCallBack(btnTag) {
        switch (btnTag) {
            // case ButtonScale.EbuttonTag.eCleare:
            case 5:
                {
                    cc.log("clear clear!!!");

                    if (this.canBetFlag) {
                        this.clearingFlag = true;
                        this.clearWithFlag(false);

                        //this.showWaitLayer();
                        var dataOper = DataOper.DataOper.getInst();
                        dataOper.getClear(this.netCallback, this);

                        this.flyBack();
                        this.sumLimit = 0;
                        this.netData.betLimit = this.netData.totalBetLimit;
                    } else {
                        //正在下单，不让清
                        this.showToast("正在为您下单，请稍后撤单");
                        /*
                        this.needClearFlag = true;
                        this.flyBack();
                        this.sumLimit = 0;
                        this.netData.betLimit = this.netData.totalBetLimit;
                        */
                    }
                }
                break;
            case ButtonScale.EbuttonTag.eChip20:
            case ButtonScale.EbuttonTag.eChip50:
            case ButtonScale.EbuttonTag.eChip100:
            case ButtonScale.EbuttonTag.eChip500:
            case ButtonScale.EbuttonTag.eChip1000:
                {
                    //cc.log("");
                    this.chipIndex = btnTag;
                    this.resetChip();
                    //cc.log("chipIndex is = ", this.chipIndex);
                }
                break;

            default:
                break;
        }
    },

    errorDialogCallback: function errorDialogCallback(typeaction, positon) //1 左边按钮 2 右边按钮
    {
        var errorDialogJs = this.errorDialog.getComponent("errorDialog");
        errorDialogJs.hideDialog();

        if (positon == 1) {
            switch (typeaction) {
                case 0:
                    {
                        //只有一个按钮刷新刷新的
                        if (this.cunCmd == 100) {
                            var dataOper = DataOper.DataOper.getInst();
                            dataOper.getInit(this.netCallback, this);
                        } else if (this.cunCmd == 101) {} else if (this.cunCmd == 102) {} else if (this.cunCmd == 103) {
                            //this.showWaitLayer();
                            var dataOper = DataOper.DataOper.getInst();
                            dataOper.getReward(this.netCallback, this);
                        } else if (this.cunCmd == 104) {
                            //this.showWaitLayer();
                            var dataOper = DataOper.DataOper.getInst();
                            dataOper.getSecondData(this.netCallback, this);
                        } else if (this.cunCmd == 105) {} else if (this.cunCmd == 106) {}
                    }
                    break;
                case 1:
                    {}
                    break;
                case 2:
                    {}
                    break;
            }
        } else {
            switch (typeaction) {
                case 0:
                    {}
                    break;
                case 1:
                    {}
                    break;
                case 2:
                    {}
                    break;
            }
        }
    },

    showChipNum: function showChipNum() {
        var netData = NetData.NetData.getInst();

        for (var i = 0; i < this.chipNodeArray.length; i++) {
            var le = this.chipNodeArray[i].getChildByName("Label").getComponent(cc.Label);
            this.adjustFontsize(le, netData.initData.betList[i]);
            le.string = netData.initData.betList[i];
        }

        for (var j = 0; j < netData.initData.betList.length; j++) {
            if (netData.initData.betList[j] == netData.initData.preBet) {
                this.chipIndex = j;
            }
        }
        this.resetChip();
    },

    adjustFontsize: function adjustFontsize(label, num) {
        var se = 71;

        if (num < 100) {} else if (num < 1000) {
            label.fontSize = se * 0.8;
        } else {
            label.fontSize = se * 0.56;
        }
    },

    resetChip: function resetChip() {
        this.setChipGray(false);
        for (var i = 0; i < this.chipNodeArray.length; i++) {
            if (this.chipIndex == i) {
                this.chipNodeArray[i].getChildByName("chouma").scale = 1;
                this.chipNodeArray[i].getChildByName("noTouch").scale = 1;
            } else {

                this.chipNodeArray[i].getChildByName("chouma").scale = 0.8;
                this.chipNodeArray[i].getChildByName("noTouch").scale = 0.8;
            }
        }
    },

    setChipGray: function setChipGray(flag) {
        for (var i = 0; i < this.chipNodeArray.length; i++) {
            this.chipNodeArray[i].getChildByName("noTouch").active = flag;
        }
    },

    showToast: function showToast(msg) {
        this.toastNode.stopAllActions();
        this.toastNode.scale = 0;
        var le = this.toastNode.getChildByName("word").getComponent(cc.Label);
        le.string = msg;
        var len = le.node.width + 20;
        this.toastNode.width = len;
        var dt = 0.2;
        var ac1 = cc.scaleTo(dt, 1.0, 1.0);
        var ac2 = cc.scaleTo(dt, 0, 0);
        this.toastNode.runAction(cc.sequence(ac1, cc.delayTime(2), ac2));
    },

    flyBack: function flyBack() {
        for (var i = 0; i < this.chooseAreaNodeArray.length; i++) {
            var chooseArea = this.chooseAreaNodeArray[i];
            var powerJS = chooseArea.getComponent("Power");
            if (powerJS.betFlag) {
                powerJS.betList = [];
                powerJS.flyBack();
            }
        }
    },

    powerBet: function powerBet(callFunc, power) {
        //判断登录、余额TODO
        var self = this;
        var callback = function callback() {
            //if(self.netData.initData.status == 1 || self.netData.initData.status == 3)
            {
                //self.canBetFlag = true;
                self.clearWithFlag(true);
                callFunc(self.chipIndex, power);
                self.unschedule(self.dealBet);
                self.scheduleOnce(self.dealBet, 0.5);
            }
        };
        self.isCanBet(callback);
    },

    /**
     * 真实投注
     */
    dealBet: function dealBet(dt) {
        //this.showWaitLayer();
        var netData = NetData.NetData.getInst();
        var dataOper = DataOper.DataOper.getInst();
        //首先检查当前是否有没有回来的投注请求
        if (this.canBetFlag) {
            this.canBetFlag = false;

            netData.reqBetList = [];

            for (var i = 0; i < this.chooseAreaNodeArray.length; i++) {
                var chooseArea = this.chooseAreaNodeArray[i];
                var powerJS = chooseArea.getComponent("Power");
                if (powerJS.betFlag) {
                    powerJS.betNum = 0;
                    for (var j = 0; j < powerJS.betList.length; ++j) {
                        netData.reqBetList.push(powerJS.betList[j]);
                        powerJS.betNum += powerJS.betList[j].bet * powerJS.betList[j].num;
                    }
                    powerJS.betList = [];
                }
            }

            dataOper.getBet(this.netCallback, this);
        } else {
            this.scheduleOnce(this.dealBet, 0.5);
        }
    }

});

cc._RFpop();
},{"ButtonScale":"ButtonScale","DataOper":"DataOper","Init":"Init","NetData":"NetData"}],"md5":[function(require,module,exports){
"use strict";
cc._RFpush(module, '2ceb3709r9Ml6wPLEEyiUfd', 'md5');
// Script/network/aes/md5.js

"use strict";

var CryptoJS = require("./core");(function (Math) {
  var C = CryptoJS;var C_lib = C.lib;var WordArray = C_lib.WordArray;var Hasher = C_lib.Hasher;var C_algo = C.algo;var T = [];(function () {
    for (var i = 0; i < 64; i++) {
      T[i] = Math.abs(Math.sin(i + 1)) * 4294967296 | 0;
    }
  })();var MD5 = C_algo.MD5 = Hasher.extend({ _doReset: function _doReset() {
      this._hash = new WordArray.init([1732584193, 4023233417, 2562383102, 271733878]);
    }, _doProcessBlock: function _doProcessBlock(M, offset) {
      for (var i = 0; i < 16; i++) {
        var offset_i = offset + i;var M_offset_i = M[offset_i];M[offset_i] = (M_offset_i << 8 | M_offset_i >>> 24) & 16711935 | (M_offset_i << 24 | M_offset_i >>> 8) & 4278255360;
      }var H = this._hash.words;var M_offset_0 = M[offset + 0];var M_offset_1 = M[offset + 1];var M_offset_2 = M[offset + 2];var M_offset_3 = M[offset + 3];var M_offset_4 = M[offset + 4];var M_offset_5 = M[offset + 5];var M_offset_6 = M[offset + 6];var M_offset_7 = M[offset + 7];var M_offset_8 = M[offset + 8];var M_offset_9 = M[offset + 9];var M_offset_10 = M[offset + 10];var M_offset_11 = M[offset + 11];var M_offset_12 = M[offset + 12];var M_offset_13 = M[offset + 13];var M_offset_14 = M[offset + 14];var M_offset_15 = M[offset + 15];var a = H[0];var b = H[1];var c = H[2];var d = H[3];a = FF(a, b, c, d, M_offset_0, 7, T[0]);d = FF(d, a, b, c, M_offset_1, 12, T[1]);c = FF(c, d, a, b, M_offset_2, 17, T[2]);b = FF(b, c, d, a, M_offset_3, 22, T[3]);a = FF(a, b, c, d, M_offset_4, 7, T[4]);d = FF(d, a, b, c, M_offset_5, 12, T[5]);c = FF(c, d, a, b, M_offset_6, 17, T[6]);b = FF(b, c, d, a, M_offset_7, 22, T[7]);a = FF(a, b, c, d, M_offset_8, 7, T[8]);d = FF(d, a, b, c, M_offset_9, 12, T[9]);c = FF(c, d, a, b, M_offset_10, 17, T[10]);b = FF(b, c, d, a, M_offset_11, 22, T[11]);a = FF(a, b, c, d, M_offset_12, 7, T[12]);d = FF(d, a, b, c, M_offset_13, 12, T[13]);c = FF(c, d, a, b, M_offset_14, 17, T[14]);b = FF(b, c, d, a, M_offset_15, 22, T[15]);a = GG(a, b, c, d, M_offset_1, 5, T[16]);d = GG(d, a, b, c, M_offset_6, 9, T[17]);c = GG(c, d, a, b, M_offset_11, 14, T[18]);b = GG(b, c, d, a, M_offset_0, 20, T[19]);a = GG(a, b, c, d, M_offset_5, 5, T[20]);d = GG(d, a, b, c, M_offset_10, 9, T[21]);c = GG(c, d, a, b, M_offset_15, 14, T[22]);b = GG(b, c, d, a, M_offset_4, 20, T[23]);a = GG(a, b, c, d, M_offset_9, 5, T[24]);d = GG(d, a, b, c, M_offset_14, 9, T[25]);c = GG(c, d, a, b, M_offset_3, 14, T[26]);b = GG(b, c, d, a, M_offset_8, 20, T[27]);a = GG(a, b, c, d, M_offset_13, 5, T[28]);d = GG(d, a, b, c, M_offset_2, 9, T[29]);c = GG(c, d, a, b, M_offset_7, 14, T[30]);b = GG(b, c, d, a, M_offset_12, 20, T[31]);a = HH(a, b, c, d, M_offset_5, 4, T[32]);d = HH(d, a, b, c, M_offset_8, 11, T[33]);c = HH(c, d, a, b, M_offset_11, 16, T[34]);b = HH(b, c, d, a, M_offset_14, 23, T[35]);a = HH(a, b, c, d, M_offset_1, 4, T[36]);d = HH(d, a, b, c, M_offset_4, 11, T[37]);c = HH(c, d, a, b, M_offset_7, 16, T[38]);b = HH(b, c, d, a, M_offset_10, 23, T[39]);a = HH(a, b, c, d, M_offset_13, 4, T[40]);d = HH(d, a, b, c, M_offset_0, 11, T[41]);c = HH(c, d, a, b, M_offset_3, 16, T[42]);b = HH(b, c, d, a, M_offset_6, 23, T[43]);a = HH(a, b, c, d, M_offset_9, 4, T[44]);d = HH(d, a, b, c, M_offset_12, 11, T[45]);c = HH(c, d, a, b, M_offset_15, 16, T[46]);b = HH(b, c, d, a, M_offset_2, 23, T[47]);a = II(a, b, c, d, M_offset_0, 6, T[48]);d = II(d, a, b, c, M_offset_7, 10, T[49]);c = II(c, d, a, b, M_offset_14, 15, T[50]);b = II(b, c, d, a, M_offset_5, 21, T[51]);a = II(a, b, c, d, M_offset_12, 6, T[52]);d = II(d, a, b, c, M_offset_3, 10, T[53]);c = II(c, d, a, b, M_offset_10, 15, T[54]);b = II(b, c, d, a, M_offset_1, 21, T[55]);a = II(a, b, c, d, M_offset_8, 6, T[56]);d = II(d, a, b, c, M_offset_15, 10, T[57]);c = II(c, d, a, b, M_offset_6, 15, T[58]);b = II(b, c, d, a, M_offset_13, 21, T[59]);a = II(a, b, c, d, M_offset_4, 6, T[60]);d = II(d, a, b, c, M_offset_11, 10, T[61]);c = II(c, d, a, b, M_offset_2, 15, T[62]);b = II(b, c, d, a, M_offset_9, 21, T[63]);H[0] = H[0] + a | 0;H[1] = H[1] + b | 0;H[2] = H[2] + c | 0;H[3] = H[3] + d | 0;
    }, _doFinalize: function _doFinalize() {
      var data = this._data;var dataWords = data.words;var nBitsTotal = this._nDataBytes * 8;var nBitsLeft = data.sigBytes * 8;dataWords[nBitsLeft >>> 5] |= 128 << 24 - nBitsLeft % 32;var nBitsTotalH = Math.floor(nBitsTotal / 4294967296);var nBitsTotalL = nBitsTotal;dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = (nBitsTotalH << 8 | nBitsTotalH >>> 24) & 16711935 | (nBitsTotalH << 24 | nBitsTotalH >>> 8) & 4278255360;dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = (nBitsTotalL << 8 | nBitsTotalL >>> 24) & 16711935 | (nBitsTotalL << 24 | nBitsTotalL >>> 8) & 4278255360;data.sigBytes = (dataWords.length + 1) * 4;this._process();var hash = this._hash;var H = hash.words;for (var i = 0; i < 4; i++) {
        var H_i = H[i];H[i] = (H_i << 8 | H_i >>> 24) & 16711935 | (H_i << 24 | H_i >>> 8) & 4278255360;
      }return hash;
    }, clone: function clone() {
      var clone = Hasher.clone.call(this);clone._hash = this._hash.clone();return clone;
    } });function FF(a, b, c, d, x, s, t) {
    var n = a + (b & c | ~b & d) + x + t;return (n << s | n >>> 32 - s) + b;
  }function GG(a, b, c, d, x, s, t) {
    var n = a + (b & d | c & ~d) + x + t;return (n << s | n >>> 32 - s) + b;
  }function HH(a, b, c, d, x, s, t) {
    var n = a + (b ^ c ^ d) + x + t;return (n << s | n >>> 32 - s) + b;
  }function II(a, b, c, d, x, s, t) {
    var n = a + (c ^ (b | ~d)) + x + t;return (n << s | n >>> 32 - s) + b;
  }C.MD5 = Hasher._createHelper(MD5);C.HmacMD5 = Hasher._createHmacHelper(MD5);
})(Math);

cc._RFpop();
},{"./core":"core"}],"mode-ecb":[function(require,module,exports){
"use strict";
cc._RFpush(module, 'e11dbyI/bFD/4JfK0/gf6re', 'mode-ecb');
// Script/network/aes/mode-ecb.js

"use strict";

var CryptoJS = require("./core");CryptoJS.mode.ECB = function () {
  var ECB = CryptoJS.lib.BlockCipherMode.extend();ECB.Encryptor = ECB.extend({ processBlock: function processBlock(words, offset) {
      this._cipher.encryptBlock(words, offset);
    } });ECB.Decryptor = ECB.extend({ processBlock: function processBlock(words, offset) {
      this._cipher.decryptBlock(words, offset);
    } });return ECB;
}();

cc._RFpop();
},{"./core":"core"}],"rewardNode":[function(require,module,exports){
"use strict";
cc._RFpush(module, 'b717b2HbwlOla7ieO9oW8vk', 'rewardNode');
// Script/rewardNode.js

"use strict";

cc.Class({
    extends: cc.Component,

    properties: {
        imgArray: [cc.Node],
        btnImg: cc.Node,
        btnText: cc.Label,
        text: cc.Node
    },

    // use this for initialization
    onLoad: function onLoad() {
        cc.log("rewardNode");
        this.btnImg.parent.on(cc.Node.EventType.TOUCH_START, function (event) {
            this.btnImg.scale = 0.8;
        }, this);

        this.btnImg.parent.on(cc.Node.EventType.TOUCH_END, function (event) {
            this.btnImg.scale = 1;
            this.node.active = false;
            cc.log("rewardColse");
            var onFunction = cc.find('Canvas').getComponent('game');
            onFunction.nextPeriod();
        }, this);

        this.btnImg.parent.on(cc.Node.EventType.TOUCH_CANCEL, function (event) {

            this.btnImg.scale = 1;
        }, this);
    },

    setContent: function setContent(status, num) {
        this.node.active = true;
        var text = "";
        if (status === 0) //未开奖
            {} else if (status == 1) //sheng
            {
                text = "中" + num + "豆";
            } else if (status == 2) //fu
            {
                text = "今日已有" + num + "人猜中!";
            } else if (status == 3) //ping
            {
                text = "返还" + num + "豆";
            } else if (status == 4) //未投注
            {} else {}
        this.text.getComponent(cc.Label).string = text;
        if (status >= 1 && status <= 3) //sheng
            {
                for (var i = 0; i < this.imgArray.length; i++) {
                    if (status - 1 == i) {
                        this.imgArray[i].active = true;
                    } else {
                        this.imgArray[i].active = false;
                    }
                }
            }
    }

});

cc._RFpop();
},{}]},{},["HelloWorld","Help","Init","Power","ButtonScale","Notouch","WaitScript","errorDialog","convertNode","flyChipNodePre","flyRewardNodePre","game","DataOper","NetData","aes","cipher-core","core","enc-base64","evpkdf","md5","mode-ecb","rewardNode"])

//# sourceMappingURL=data:application/json;charset=utf-8;base64,